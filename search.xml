<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git使用方法</title>
    <url>/2023/09/16/git/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="简易的命令行入门教程"><a href="#简易的命令行入门教程" class="headerlink" title="简易的命令行入门教程"></a>简易的命令行入门教程</h3><h3 id="Git全局设置"><a href="#Git全局设置" class="headerlink" title="Git全局设置"></a>Git全局设置</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;hnyufushan&quot;</span><br><span class="line">git config --global user.email &quot;82271092@qq.com&quot;</span><br></pre></td></tr></table></figure>
<h3 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mkdir bzglpt</span><br><span class="line">cd bzglpt</span><br><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://gitee.com/hnyufushan/bzglpt.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="已有仓库"><a href="#已有仓库" class="headerlink" title="已有仓库"></a>已有仓库</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd existing_git_repo</span><br><span class="line">git remote add origin https://gitee.com/hnyufushan/bzglpt.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="本地存在的文件上传都git命令"><a href="#本地存在的文件上传都git命令" class="headerlink" title="本地存在的文件上传都git命令"></a>本地存在的文件上传都git命令</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd 项目目录</span><br><span class="line">git init</span><br><span class="line">git remote add origin  git地址</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;init name&quot;</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2023/08/17/linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="vi和vim"><a href="#vi和vim" class="headerlink" title="vi和vim"></a>vi和vim</h3><blockquote>
<p>vi和vim可以创建并编辑文件<br>用法：vi text.txt</p>
</blockquote>
<h3 id="vi预览模式下"><a href="#vi预览模式下" class="headerlink" title="vi预览模式下"></a>vi预览模式下</h3><blockquote>
<ol>
<li>定位到16行   <strong>命令：16g</strong></li>
<li>直接定位并且编辑第16行  <strong>命令：vi text.txt +16</strong></li>
<li>查看文件末尾  <strong>命令：vi text.txt +</strong></li>
<li>保存退出  <strong>命令：”：wq”或者”:x”</strong></li>
<li>跳到行首 <strong>命令：0</strong>  跳到行尾 <strong>命令：$</strong></li>
<li>文件顶部  <strong>命令：gg</strong></li>
<li>文件底部  <strong>命令：G</strong></li>
<li>到指定行  <strong>命令：数字gg</strong>   例如：66gg-&gt;就是到文件66行</li>
<li>上一页  <strong>命令：Ctrl+b</strong></li>
<li>下一页  <strong>命令：Ctrl+f</strong></li>
<li>选择命令  <strong>命令：V</strong></li>
<li>查找命令 <strong>命令：&#x2F;str 向上查找n 向下查找N</strong></li>
</ol>
</blockquote>
<h3 id="vi编辑模式下"><a href="#vi编辑模式下" class="headerlink" title="vi编辑模式下"></a>vi编辑模式下</h3><blockquote>
<p>预览模式输入<strong>命令：i</strong> 即可进入编辑模式，可以自由编辑代码。</p>
</blockquote>
<h3 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令"></a>linux基本命令</h3><blockquote>
<ol>
<li>创建文件  <strong>touch  aaa.txt</strong>  </li>
<li>创建文件夹 <strong>mkdir  test</strong></li>
<li>删除文件 <strong>rm  aaa.txt</strong></li>
<li>删除文件夹 <strong>rm  -r  test</strong></li>
<li>帮助文档 <strong>例如：mkdir —help  或  rm  —</strong></li>
<li>文件列表<blockquote>
<p>ls  -a    显示所有包括隐藏文件<br> ls  -l    文件以列表显示<br> ls  -l  -h  显示文件大小列表  可以简写ls  -lh<br> ls  -lha  显示列表包括隐藏文件<br> ls  t*  表示t开头的文件</p>
</blockquote>
</li>
<li>查看文件 <strong>cat  -b  123.txt  带行数查看cat  -n  123.txt 或者 more  123.txt</strong></li>
<li>文件查找  <strong>grep  -n  hello  123.txt</strong>  在123.txt中查找hello关键字  并显示在第几行</li>
<li>find  路径  -name  “<code>*1*</code>”  查找含有1的文件</li>
<li>写入文件  <strong>echo  hello  test  &gt; 123.txt</strong>  写入文件内容<br>ls  -lh  &gt; a   &gt;是覆盖 &gt;&gt;是写入</li>
<li>编辑文件 <strong>gedit  123.txt</strong></li>
<li>组管理<blockquote>
<p>sudo  groupadd  dev  添加组<br> sudo  groupdel  dev  删除组<br> sudo  chgrp  -R  dev  test&#x2F;  给test文件修改为dev组</p>
</blockquote>
</li>
<li>用户管理<blockquote>
<p>sudo  useradd  -m  -g  dev  wangwu  创wangwu用户指定dev组  -m是创建用户目录  -g是指定组<br> sudo  passwd  wangwu  设置密码<br> usermod  -s  &#x2F;bin&#x2F;bash  wangwu  修改王五登陆后窗口执行脚本（解决用户登陆后ls没有u颜色显示）</p>
</blockquote>
</li>
<li>查询系统日期 <strong>date</strong></li>
<li>cal  查一个月  cal  -y  查一年的日历</li>
<li>磁盘空间查看<blockquote>
<p>df  -h  磁盘空间占用<br> du  -h  当前目录空间占用</p>
</blockquote>
</li>
<li>查看进程<blockquote>
<p>ps  au  查看所有用户正在使用进程  ps  aux查看所有进程<br> top  按照内存占用查看<br> kill  98765  杀死进程  kill  -9  98765  强制杀死</p>
</blockquote>
</li>
<li>解压和压缩<blockquote>
<p>tar  -cvf  test.tar  1.txt  2.txt  打包两个文件<br> tar  -xvf  test.tar  解压</p>
</blockquote>
</li>
<li>打包的时候要压缩文件命令如下：<blockquote>
<p>tar  -zcvf  test.tar.gz  1.txt<br>  tar  -zxvf  test.tar.gz  解压缩</p>
</blockquote>
</li>
<li>查看某个可执行程序的位置 <strong>which  javac</strong></li>
</ol>
</blockquote>
<h3 id="查询被占用的端口"><a href="#查询被占用的端口" class="headerlink" title="查询被占用的端口"></a>查询被占用的端口</h3><p>首先是需要输入命令，查看被占用的端口的进程</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lsof -i:端口</span><br><span class="line">或者</span><br><span class="line">netstat -tunpl |grep</span><br></pre></td></tr></table></figure>
<p>如果想详细查看这个进程，ID具体是哪一个进程，可以通过命令的方式进行查看进程的详细信息</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ps -ef|grep 进程ID</span><br></pre></td></tr></table></figure>
<p>结束进程</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">kill -9 ID</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>个人信息</title>
    <url>/2022/05/06/privateInfo/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3d1774d2c4107b2a3541aac217e65db151a216fab47e7f4a351c0fd338df5c36">383d5267be613146e6fa3a72848361ff8d231b16555684b2c4b8c092095f1cc025e72b253853fc40c904793ecabf7d0b6278ef479e552a6ec245a6cdd0b5b2ca4c499e812bfc46a327d31c70bb61ce7f28de23737799aa9d3d7c3d27698561e98d3fbbc02f83483ea2e21cffdd5d6560376cf59f2316b7b3627c913124928b47ec6371e6678487f2646136578669bac831a5b33c18dbd5c649d56de56224756f0453eb6eac56e367c63d2634f48f6ceafbf6c212b70bc82badabaa773c5c34a9e69296527ee18acec1d0b5a4288a3e88270e0e94f6588f038bff12586381ed0af3ae1657049b384dd065113ed37ebd08f912e100da889d8ddb316f3dd5dbaefb738776b344cf1f7d938990353c95ea73a90156771a9c91621eda5e5c09f9d10a70c90d643159952e1e214fa658e8199de24a7561859ae18564d092f86a05d09656f0b6769f82c54944c674b9f812989089b697ac9e1459f5068b4a1366159217d1b25332b11fe8fe2944ecd82fab870b8a7b0505f764b8c35be411112181b0a7384564ce381f2f142f9c54efc7675ab9b36d081a49929658212daae152ebfb6832cd24ce06931221d0d779e88f9f776954a1eee4199b1a3c5ad1445a7c42a49baebeb7f3ce112e28fa7760f1f85f8f922d81815f3074a9fa6e2d5495b4f397a80db81bb7e1da2042f1f321805b8d64afd3251b07f5a8746e16da6bfd840c29b71001bfe513a76d71315c5d5cc44d5f320768e2f7b4e266c9335056544881ea0bb60f2b64c97b6ac29104860b6d17b74a3898cc1e92fc7cb6bf1067060a8d9f34293c40b8faf87e70c1a3345feb22e4e8c7ca07d2a6dfbdfcfb4432f9186e07fdc6372b973a21af23a30c8bcffd038b7db17a57d1c0ed9a27893d6163f525842fdf0ebc369c8a1c19303d17a98492c634d28287e8b8149052769bf7255e3b5c824e5e6a4135de47f0cfb884881b0d0eaa0d3912edd6ee3b1b4e50743f36344c359c1ba3623066d0971437f7600f06229bbc11303f6e890f1577b87403e68484a5aba254df3656331dbf963df3b68fd315cfdd63205e578d38c3817a5cca13aa0e3744bd9979d3dbd3c4424111b1d093d03de57999533441b903a7456d2b6f4064cefe02ce14df0bd98d440e765027631c9bd9861006ba134523a548b3a4c271143646cc68cd6631659738101f34cc657ec990463916f8ff4283374acda4275a3300672d908bb639bf9589c609450205186aa81723b1116a6b38f58796c73da3845d814779aa58d3b4e6c0c6ba60733e10fefc838fffcc9b152cdf40a78af8283f4e486dcc79de972799cae2c90c792313e57e92949a302d72645e76264f42d88d9932b4c2627a6d823ada4385633293f2b9f841a5504f6eaf2536a0f760377d6420cb781498160d9f2a51f016e83307c6a93fb7d5e39a9a235360d4d174b97f04f5ba3afb40203d81842f423f11f8234ff56703c9c98bc4e361886c37838d277b142c01b54bc62c392288cad04ba0009f28b724c919168593fc91ee2ba5071624ff7206ced9d08b1ecf7363f4d0a32f61f62df69849f4137ffd02ed39a7cb55c599a9f7d050250305555c16bbaa66ffa5049d2cc313c9feec5cfb79aaf34a022bf3d4fea25cd4f31115ee47fe7540e15f75533e8961052237ff0b4845477e212968d4faa9ae45a5ac7f43031b09b298f2b83b1832eb70e905909404bac6a36d251fd036102fa7a71af229f41b71ded3a0936ee4d3781c037269a2fd85d3c39eea87322692fa5fe801f242948bad6dbb84b2b47c25b2ebda7250ab9a5de5e76ee2c92f2850c49a5f19b1fd6cd16395e3504d809caf4721adea0cf4d6e1ee8ab8bd6d1c309c394d7ea3d4a1e2525af6427763201951b83e09a7c6a027e92b2da399ee3fcd70bb7ff24ce817736f4a81226ac350a39c6066895b2c60289c67574ccda24ddc7e115d047405e6e94e793f83ffc175f8e2eae11f3cfef0a35d2182292f00857ba0234c45e9ba6b2eeacfadc0235071d4a037cefda9335a6143cca2688b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>个人信息</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>今天给大家分享，如何永久激活(破解) IntelliJ IDEA 2019.1.1</title>
    <url>/2023/08/22/idea/%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB(%E7%A0%B4%E8%A7%A3)%20IntelliJ%20IDEA%202019.1.1/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="去官网下载并安装-idea"><a href="#去官网下载并安装-idea" class="headerlink" title="去官网下载并安装 idea"></a>去官网下载并安装 idea</h3><blockquote>
<p>地址：<a href="https://www.jetbrains.com/idea/download">https://www.jetbrains.com/idea/download</a><br>文件有点大，耐心等待一会儿。</p>
</blockquote>
<h3 id="下载破解-crack-jar-包"><a href="#下载破解-crack-jar-包" class="headerlink" title="下载破解(crack) jar 包"></a>下载破解(crack) jar 包</h3><blockquote>
<p>链接: <a href="https://pan.baidu.com/s/11rnXR6J1D9lP3lW4fh8mKA">https://pan.baidu.com/s/11rnXR6J1D9lP3lW4fh8mKA</a><br>提取码: d0gq</p>
</blockquote>
<h3 id="下载好了的-crack-jar包-放到-idea-的-bin-目录下"><a href="#下载好了的-crack-jar包-放到-idea-的-bin-目录下" class="headerlink" title="下载好了的 crack jar包 放到 idea 的 bin 目录下"></a>下载好了的 crack jar包 放到 idea 的 bin 目录下</h3><p><a href="https://fsvip.gitee.io/imgs/jetbrains-agent.jar">jetbrains-agent.jar</a></p>
<h3 id="修改-bin-目录下的-idea-vmoptions-文件"><a href="#修改-bin-目录下的-idea-vmoptions-文件" class="headerlink" title="修改 bin 目录下的 idea.vmoptions 文件"></a>修改 bin 目录下的 idea.vmoptions 文件</h3><h4 id="启动你的IDEA，首先选择：试用（Evaluate-for-free）进入IDEA"><a href="#启动你的IDEA，首先选择：试用（Evaluate-for-free）进入IDEA" class="headerlink" title="启动你的IDEA，首先选择：试用（Evaluate for free）进入IDEA"></a>启动你的IDEA，首先选择：试用（Evaluate for free）进入IDEA</h4><h4 id="点击IDEA菜单：Help-Edit-Custom-VM-Options"><a href="#点击IDEA菜单：Help-Edit-Custom-VM-Options" class="headerlink" title="点击IDEA菜单：Help -&gt; Edit Custom VM Options"></a>点击IDEA菜单：Help -&gt; Edit Custom VM Options</h4><p>如果提示是否要创建文件，点 Yes。<br>把 idea.vmoptions 文件加一行如下的配置，根据你保存的文件名自行变更</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-javaagent:…/bin/jetbrains-agent.jar</span><br></pre></td></tr></table></figure>
<img src="https://fsvip.gitee.io/imgs/7.png">

<h3 id="在-hosts-文件里面添加如下配置"><a href="#在-hosts-文件里面添加如下配置" class="headerlink" title="在 hosts 文件里面添加如下配置"></a>在 hosts 文件里面添加如下配置</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0.0.0.0 account.jetbrains.com</span><br></pre></td></tr></table></figure>
<h3 id="打开-idea，注册选择License-server方式"><a href="#打开-idea，注册选择License-server方式" class="headerlink" title="打开 idea，注册选择License server方式"></a>打开 idea，注册选择License server方式</h3><p>地址填入：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">http://fls.jetbrains-agent.com</span><br></pre></td></tr></table></figure>
<h3 id="应该没啥问题了"><a href="#应该没啥问题了" class="headerlink" title="应该没啥问题了"></a>应该没啥问题了</h3><p>现在打开你的 idea ，看一下是不是注册成功了。</p>
<h3 id="idea2019-1-1-可用激活码："><a href="#idea2019-1-1-可用激活码：" class="headerlink" title="idea2019.1.1 可用激活码："></a>idea2019.1.1 可用激活码：</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">520E5894E2-eyJsaWNlbnNlSWQiOiI1MjBFNTg5NEUyIiwibGljZW5zZWVOYW1lIjoicGlnNiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-DZ/oNHBfyho0XrrCJJvAOKg5Q1tLBgOdbCmzCKwkuM+Yryce0RoOi3OOmH6Ba/uTcCh/L37meyD0FJdJIprv59y4+n+k2kIeF/XKrKqg0dEsDUQRw0lUqqMt99ohqa+zmbJ44Yufdwwx/F1CtoRGvEQ2Mn0QjuqRoZJZ3wiT5Am22JiJW8MaNUl3wg9YPj+OPGARKKJUdUJ0NGUDQBcBAv5ds8LhbSbJSbPkbkwH/a1QMz4nEdn6lRDKI1aFIn43QhBSCFqvUq6TPJlbIJ0ZjE+PyZjHFBKCgkry0DHPXU2BbtIZPsksQnN3fx240a9K6sN7peZnLpEoMoq23FEz4g==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">DW7PIJOW0C-eyJsaWNlbnNlSWQiOiJEVzdQSUpPVzBDIiwibGljZW5zZWVOYW1lIjoi56CB5YacIOWwj+aZuiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjEtMDktMjQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjEtMDktMjQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMjEtMDktMjQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTViIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEUCIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQREIiLCJwYWlkVXBUbyI6IjIwMjEtMDktMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJwYWlkVXBUbyI6IjIwMjEtMDktMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjAyMS0wOS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwMjEtMDktMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTIiwicGFpZFVwVG8iOiIyMDIxLTA5LTI0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjEwODI1UFBBTTAwMDAwNSIsImhhc2giOiIyNTkyMjg1MS8wOjE1NjYxMjU3NjAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-OQOdRWWLA9tJGYd93sZC7hKB07rFFxGE1gxSqquW6WWYSfcelcxNQJmtWbIUmeVg1lbmLDjaJ4dR0J5pQo81zyKVmbzroc7F3XhodP0Mo6Z1beQPHyk8F/qNnEqVuYKbuQTQbUdSfP4xdd6YttL2s3kSSwZvpxIJGb0FspoedVh1SMEd1qjRTsKFtCt8fgAiWUKFRTHxcOMlhC+39GTZUNph0ehgx5R0LIQ4mOYOt96fYwbadsrMPNrFpWf7AGm6nwwX0oru5WXGdpCOKexlNCm3nNPeNzKgH8mdDR8kJmJMW2AUpqcR25TxoeZJSRWzpoP3lShFtwLQQYPDlANegA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCP4uk4SlVdA5nuA3DQC+NsEnZS9npFnO0zrmMWcz1++q2UWJNuGTh0rwi+3fUJIArfvVh7gNtIp93rxjtrQAuf4/Fa6sySp4c32MeFACfC0q+oUoWebhOIaYTYUxm4LAZ355vzt8YeDPmvWKxA81udqEk4gU9NNAOz1Um5/8LyR8SGsSc4EDBRSjcMWMwMkYSauGqGcEUK8WhfplsyF61lKSOFA6VmfUmeDK15rUWWLbOMKgn2cxFA98A+s74T9Oo96CU7rp/umDXvhnyhAXSukw/qCGOVhwKR8B6aeDtoBWQgjnvMtPgOUPRTPkPGbwPwwDkvAHYiuKJ7Bd2wH7rAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/wi9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure>
<h3 id="最新激活工具"><a href="#最新激活工具" class="headerlink" title="最新激活工具"></a>最新激活工具</h3><p><a href="https://fsvip.gitee.io/imgs/idea2019-2020激活工具.rar">idea2019-2020激活工具.rar</a></p>
<h3 id="小于云音乐"><a href="#小于云音乐" class="headerlink" title="小于云音乐"></a>小于云音乐</h3><p><a href="https://fsvip.gitee.io/imgs/xiaoyu_musci.apk">小于云音乐</a></p>
]]></content>
      <categories>
        <category>破解教程</category>
      </categories>
      <tags>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA如何上传自己的jar包到Maven中央仓库</title>
    <url>/2021/07/22/maven/JAVA%20%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="发布Jar包到Maven中央仓库"><a href="#发布Jar包到Maven中央仓库" class="headerlink" title="发布Jar包到Maven中央仓库"></a>发布Jar包到Maven中央仓库</h3><p>在项目开发过程中，我们常常会使用 Maven &#x2F; Gradle 从仓库拉取开源的第三方 jar 包，可能是私有仓库，可能是 Maven 中央仓库，也可能是第三方的镜像。本文将一些简单实用的操作步骤和示例，带领大家将自己写好的代码或开源项目发布到 Maven中央仓库( <a href="https://mvnrepository.com/">https://mvnrepository.com</a> )中，让其他人可以直接依赖你的 jar 包，而不需要先下载你的代码 &#x2F; jar 后 install 到本地。<br>Maven中央仓库并不支持直接发布 jar 包，需要将 jar 包发布到一些指定的第三方Maven仓库，然后该仓库再将 jar 包同步到 Maven中央仓库，Sonatype便是 Maven中央仓库指定的暂存库。</p>
<h3 id="注册帐号"><a href="#注册帐号" class="headerlink" title="注册帐号"></a>注册帐号</h3><p>入口有点难找，提示一下，在 Build 选项卡里面<br><a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a></p>
<blockquote>
<p>密码设置十分变态，12位，必须包含大小写数字特殊字符，有必要拿小本本记一下。而且最好不要设置在 xml 中需要转义的特殊字符，比如 &amp;，否则后面配置 xml 时还要转义！不要问我为啥知道的。</p>
</blockquote>
<h3 id="Jira申请"><a href="#Jira申请" class="headerlink" title="Jira申请"></a>Jira申请</h3><p>点击新建按钮或者直接访问 <a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a> ，提一个 issue，只有申请通过了才有可能上传到中央仓库上，一般 5 分钟左右会有回应，我昨晚 10 点左右申请的，不知道是不是时差问题他们回应比较快：</p>
<blockquote>
<ul>
<li>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】</li>
<li>Issue Type：选择【New Project】</li>
<li>Summary和Description ：自己填,注意要用英文</li>
<li>Group Id：这个必须要注意,如果你用的是GitHub, 一定要是 io.github.你的github用户名, 例如我的项目地址是: <a href="https://github.com/admin4j/common-http">https://github.com/admin4j/common-http</a>, 那我的 groupId就是<br>  io.github.admin4j.如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用</li>
<li>Project URL: 是你的项目地址</li>
<li>SCM url: 是你的项目git地址</li>
<li>Username(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册</li>
</ul>
</blockquote>
<p>其他使用默认值就行了<br>大概十分钟会收到恢复，如果你的 Group Id 随便写的话会出下面的问题</p>
<h3 id="gpg-环境安装"><a href="#gpg-环境安装" class="headerlink" title="gpg 环境安装"></a>gpg 环境安装</h3><p>gpg的主要作用是生成密钥对，会用于后续我们组件发布的校验。</p>
<blockquote>
<ol>
<li>载地址： <a href="https://www.gnupg.org/download/">https://www.gnupg.org/download/</a> , 安装时会附带安装UI程序kleopatra</li>
<li>在安装完成后，运行kleopatra程序，新建密钥对</li>
<li>导出证书 发布证书</li>
</ol>
</blockquote>
<img src="https://fsvip.gitee.io/img/wz/3.png">

<h3 id="配置maven-settings-xml"><a href="#配置maven-settings-xml" class="headerlink" title="配置maven settings.xml"></a>配置maven settings.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>hnyufushan<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>@Cckmima531010<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在项目的pom-xml文件中"><a href="#在项目的pom-xml文件中" class="headerlink" title="在项目的pom.xml文件中"></a>在项目的pom.xml文件中</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://gitee.com/hnyufushan_admin/bzglpt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">connection</span>&gt;</span>https://gitee.com/hnyufushan_admin/bzglpt.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hnyufushan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>hnyufushan<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">email</span>&gt;</span>82271092@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">role</span>&gt;</span>Developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>+8<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">nexusUrl</span>&gt;</span>https://s01.oss.sonatype.org/<span class="tag">&lt;/<span class="name">nexusUrl</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">autoReleaseAfterClose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoReleaseAfterClose</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- jdk1.8要加上，1.7要去掉，否则会报错 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">additionalJOptions</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">additionalJOption</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalJOption</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">additionalJOptions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>在你的项目下：mvn clean deploy<br>或者IDE中配置好刚才的setting.xml，然后deploy，日志中出现SUCCESS ，成功了。</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>上面执行完成之后，登陆nexus： <a href="https://s01.oss.sonatype.org/#stagingRepositories">https://s01.oss.sonatype.org/#stagingRepositories</a><br>点击上方的Close，会检测你的jar包是否存在问题，如果存在问题，点击下方的Activity即可查看具体的问题，照着问题修复即可。如果有问题要把原包删除，点击drop即可，再重新deploy。<br>检测完成后没问题后，上方的release就会变成可点击的状态，点击release后，会收到一份邮件。需要等待一会大概半小时才同步到maven仓库，大概好几个小时才可以可以在 <a href="https://search.maven.org/">https://search.maven.org/</a> 中搜到。<br>至此。已完成将项目发布至中央仓库。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown教程</title>
    <url>/2023/07/11/markdown%E6%95%99%E7%A8%8B/Markdown%E6%95%99%E7%A8%8B/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。</p>
</blockquote>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>
<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>
<h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; 念念不忘，必有回响</span><br></pre></td></tr></table></figure>
<p>显示结果如下：</p>
<blockquote>
<p>区块引用<br>念念不忘，必有回响</p>
</blockquote>
<p>区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 第一层</span><br><span class="line">&gt; &gt; 第二层嵌套</span><br><span class="line">&gt; &gt; &gt; 第三层嵌套</span><br></pre></td></tr></table></figure>
<h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项</span><br></pre></td></tr></table></figure>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 列表中使用区块</span><br><span class="line">    &gt; 念念不忘，必有回响</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96; ），例如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure>
<p><code>printf()</code> 函数<br>你想输入这段代码中包含符号&#96; ，那么你应该这么输入：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">``这段代码中包含`符号``</span><br></pre></td></tr></table></figure>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是一个博客链接 [Jayhrn](https://blog.jayhrn.com/)</span><br></pre></td></tr></table></figure>
<h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 Jayhrn 作为网址变量 [Jayhrn][Jayhrn]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [Jayhrn]: https://blog.jayhrn.com/</span><br></pre></td></tr></table></figure>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 Jayhrn 作为网址变量 <a href="https://blog.jayhrn.com/">Jayhrn</a><br>然后在文档的结尾为变量赋值（网址）</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![学习 图片](https://img.jayhrn.com/img/posts/20220727/003.webp)</span><br><span class="line"></span><br><span class="line">![学习 图片](https://img.jayhrn.com/img/posts/20220727/003.webp &quot;Jayhrn&quot;)</span><br></pre></td></tr></table></figure>
<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的标签。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;https://img.jayhrn.com/img/posts/20220727/003.webp&quot; width=&quot;25%&quot;&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><img src="https://img1.baidu.com/it/u=3539595421,754041626&fm=253&fmt=auto&app=138&f=JPEG?w=889&h=500"></th>
<th><img src="https://img1.baidu.com/it/u=1500716295,3279382336&fm=253&fmt=auto&app=120&f=JPEG?w=1280&h=800"></th>
</tr>
</thead>
</table>
<center style="flex: auto">
<img src="https://img.jayhrn.com/img/posts/20220727/003.webp" height="15%" width="100"><img src="https://img1.baidu.com/it/u=1500716295,3279382336&fm=253&fmt=auto&app=120&f=JPEG?w=1280&h=800" width="15%">
</center>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>对齐方式</td>
<td></td>
</tr>
</tbody></table>
<p>我们可以设置表格的对齐方式：</p>
<p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-:设置内容和标题栏居中对齐。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure>
<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure>
<p><strong>文本加粗</strong><br>** 正常显示星号 **</p>
<h3 id="添加视频"><a href="#添加视频" class="headerlink" title="添加视频"></a>添加视频</h3><p>由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。<br>用法如下(本地视频、在线视频都可以)：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;iframe height=498 width=510 src=&quot;视频地址&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。</p>
<iframe height="198" width="110" src="//player.bilibili.com/player.html?aid=418448598&bvid=BV1fV411x72a&cid=350821534&page=1">
</iframe> 
### 插入云上对象存储中的视频
直接插入本地已上传至公网的视频，使用的是自定义的 HTML 标签的视频播放器。
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;video controls height=&#x27;100%&#x27; width=&#x27;100%&#x27; src=&quot;https://encooacademy.oss-cn-shanghai.aliyuncs.com/activity/OpenBrowser.mp4&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>
<video controls height="100%" width="100%" src="https://encooacademy.oss-cn-shanghai.aliyuncs.com/activity/OpenBrowser.mp4" poster="http://media.w3.org/2010/05/sintel/poster.png"></video>

<video id="video" height="100%" width="100%" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png">
    <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4">
    <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm">
    <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg">
    <p>Your user agent does not support the HTML5 Video element.</p>
</video>


]]></content>
      <categories>
        <category>Markdown教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox下Centos7配置静态IP</title>
    <url>/2023/08/18/%E5%BF%85%E7%9C%8B%E7%B2%BE%E9%80%89/VirtualBox%E4%B8%8BCentos7%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="打开Oracle-VM-VirtualBox，点击设置，再点击网络"><a href="#打开Oracle-VM-VirtualBox，点击设置，再点击网络" class="headerlink" title="打开Oracle VM VirtualBox，点击设置，再点击网络"></a>打开Oracle VM VirtualBox，点击设置，再点击网络</h3><img src="https://fsvip.gitee.io/img/1.png">
<img src="https://fsvip.gitee.io/img/2.png">

<h3 id="点击系统，勾选网络选项"><a href="#点击系统，勾选网络选项" class="headerlink" title="点击系统，勾选网络选项"></a>点击系统，勾选网络选项</h3><img src="https://fsvip.gitee.io/img/3.png">

<h3 id="启动虚拟机，修改ifcfg-enp0s3文件"><a href="#启动虚拟机，修改ifcfg-enp0s3文件" class="headerlink" title="启动虚拟机，修改ifcfg-enp0s3文件"></a>启动虚拟机，修改ifcfg-enp0s3文件</h3><blockquote>
<p>输入vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-enp0s3  </p>
</blockquote>
<p>#ip设置为静态<br>BOOTPROTO&#x3D;static<br>#设置开机自启<br>ONBOOT&#x3D;yes<br>#配置IP地址信息，ip地址根据自己需要修改<br>IPADDR&#x3D;192.168.56.101</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=924f6702-e1d0-407d-8beb-850d5d6db146</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.56.101</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">以下信息酌情添加，部分centos添加会ping不通外网</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.100.1</span><br><span class="line">#取消NetworkManager管理</span><br><span class="line">NM_CONTROLLED=no</span><br></pre></td></tr></table></figure>

<h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><p>命令行输入  service network restart<br><img src="https://fsvip.gitee.io/img/4.png"></p>
<h3 id="网卡重启成功后ping一下百度测试是否可以ping通外网"><a href="#网卡重启成功后ping一下百度测试是否可以ping通外网" class="headerlink" title="网卡重启成功后ping一下百度测试是否可以ping通外网"></a>网卡重启成功后ping一下百度测试是否可以ping通外网</h3><blockquote>
<p>输入 ping <a href="http://www.baidu.com/">www.baidu.com</a><br>出现如下情况，成功修改静态IP并ping通外网</p>
</blockquote>
<img src="https://fsvip.gitee.io/img/5.png">

<h3 id="查看静态IP地址"><a href="#查看静态IP地址" class="headerlink" title="查看静态IP地址"></a>查看静态IP地址</h3><blockquote>
<p>命令行输入ip addr</p>
</blockquote>
<img src="https://fsvip.gitee.io/img/5.png">]]></content>
      <categories>
        <category>必看精选</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接工具阿里巴巴开源 Chat2DB v1.0.11 初体验</title>
    <url>/2023/07/24/%E5%BF%85%E7%9C%8B%E7%B2%BE%E9%80%89/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E6%BA%90%20Chat2DB%20v1.0.11%20%E5%88%9D%E4%BD%93%E9%AA%8C/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<blockquote>
<p>作为一名阿里巴巴开源项目的拥护者，从 Chat2DB 开源至今都有关注这个开源项目。因为之前的版本还存在较多 Bug，暂时就没有分享。目前升级到 v1.0.11 版本后，我来谈谈我个人的一个使用感受。</p>
</blockquote>
<h3 id="什么是-Chat2DB"><a href="#什么是-Chat2DB" class="headerlink" title="什么是 Chat2DB"></a>什么是 Chat2DB</h3><p>Chat2DB 是一款有开源免费的多数据库客户端工具，支持 Windows、MAC 本地安装，也支持服务器端部署，Web 网页访问。和传统的数据库客户端软件Navicat、DBeaver 相比 Chat2DB 集成了 AIGC 的能力，能够将自然语言转换为 SQL，也可以将 SQL 转换为自然语言，可以给出研发人员 SQL 的优化建议，极大地提升人员的效率，是 AI 时代数据库研发人员的利器。未来即使不懂SQL的运营业务也可以使用快速查询业务数据、生成报表能力。</p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>项目 Releases 地址：<br><a href="https://github.com/alibaba/Chat2DB/releases">https://github.com/alibaba/Chat2DB/releases</a></p>
<p>大家根据自己的电脑环境选择对应版本即可，博主这里使用的 MacOS X64（Intel芯片）版本。</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>正常双击打开拖动到 Applications 进行安装，安装完成后配置 Chat2DB AI SQL 功能。找到设置，填写 Open AI 的密钥（登录 OpenAI 官网，右上角View API keys 创建即可）。</p>
<p><img src="https://pics3.baidu.com/feed/730e0cf3d7ca7bcbfd0d1463bc70086ff724a88a.jpeg@f_auto?token=8396a5a372dc3e7b107e89c83aaf590a"></p>
<p>创建完成后，在设置中输入刚刚获取的 OpenAI 密钥。<br><img src="https://pics1.baidu.com/feed/7acb0a46f21fbe0939ce501481186f3f8644ada7.jpeg@f_auto?token=25dee4efcbaf357f85d15a807e4558f5"><br>至此，我们已经完成了基础的配置，下面我们来感受一下 Chat2DB。<br>Chat2DB 初体验</p>
<h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p>这里以 MySQL 为例，点击加号（+）新建数据源。<br><img src="https://pics6.baidu.com/feed/b3fb43166d224f4ad2febdc5e08ff35e9922d103.jpeg@f_auto?token=0575a845550dc5f3a99049d616ee1bde"></p>
<p>填写相关链接信息，选择数据库，这里 test 为例：<br><img src="https://pics2.baidu.com/feed/c8177f3e6709c93d3ffc19b575459bd0d00054ee.jpeg@f_auto?token=8bfe9b8074e17bac3373ff55b41989a5"><br>目前 MAC 版本选择了数据库 test，但是实际上依旧还是将整个 localhost 的所有数据库列出来了。这是个已知 Bug，博主也提交了 Issue，建议官方不选择数据库默认所有，指定了数据库就单独显示某个库。</p>
<h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><p>这里博主准备了一份测试数据表，分别是：科目表、学生成绩表、学生信息表、学生选修科目表，大家可以复制执行即可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;<span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;<span class="comment">-- ------------------------------ Table structure for course-- ----------------------------DROP TABLE IF EXISTS `course`;CREATE TABLE `course` (  `id` int NOT NULL AUTO_INCREMENT COMMENT &#x27;科目ID&#x27;,  `name` varchar(50) NOT NULL COMMENT &#x27;科目名称&#x27;,  `teacher` varchar(50) NOT NULL COMMENT &#x27;授课教师&#x27;,  `credit` int NOT NULL COMMENT &#x27;科目学分&#x27;,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;科目表&#x27;;-- ------------------------------ Records of course-- ----------------------------BEGIN;INSERT INTO `course` VALUES (1, &#x27;语文&#x27;, &#x27;张老师&#x27;, 100);INSERT INTO `course` VALUES (2, &#x27;数学&#x27;, &#x27;王老师&#x27;, 100);COMMIT;-- ------------------------------ Table structure for score-- ----------------------------DROP TABLE IF EXISTS `score`;CREATE TABLE `score` (  `id` int NOT NULL AUTO_INCREMENT COMMENT &#x27;成绩ID&#x27;,  `student_id` int NOT NULL COMMENT &#x27;学生ID&#x27;,  `course_id` int NOT NULL COMMENT &#x27;科目ID&#x27;,  `score` int NOT NULL COMMENT &#x27;成绩&#x27;,  PRIMARY KEY (`id`),  KEY `student_id` (`student_id`),  KEY `course_id` (`course_id`),  CONSTRAINT `score_ibfk_1` FOREIGN KEY (`student_id`) REFERENCES `student` (`id`),  CONSTRAINT `score_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `course` (`id`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;学生成绩表&#x27;;-- ------------------------------ Records of score-- ----------------------------BEGIN;INSERT INTO `score` VALUES (1, 1, 1, 90);INSERT INTO `score` VALUES (2, 1, 2, 95);INSERT INTO `score` VALUES (3, 2, 1, 100);INSERT INTO `score` VALUES (4, 2, 2, 99);COMMIT;-- ------------------------------ Table structure for student-- ----------------------------DROP TABLE IF EXISTS `student`;CREATE TABLE `student` (  `id` int NOT NULL AUTO_INCREMENT COMMENT &#x27;学生ID&#x27;,  `name` varchar(50) NOT NULL COMMENT &#x27;学生姓名&#x27;,  `gender` varchar(10) NOT NULL COMMENT &#x27;学生性别&#x27;,  `birthday` date NOT NULL COMMENT &#x27;学生生日&#x27;,  `address` varchar(100) NOT NULL COMMENT &#x27;学生住址&#x27;,  `phone` varchar(20) NOT NULL COMMENT &#x27;学生联系方式&#x27;,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;学生信息表&#x27;;-- ------------------------------ Records of student-- ----------------------------BEGIN;INSERT INTO `student` VALUES (1, &#x27;小明&#x27;, &#x27;男&#x27;, &#x27;2023-06-16&#x27;, &#x27;广州&#x27;, &#x27;13724889158&#x27;);INSERT INTO `student` VALUES (2, &#x27;小羊&#x27;, &#x27;女&#x27;, &#x27;2023-06-16&#x27;, &#x27;广州&#x27;, &#x27;13800126000&#x27;);COMMIT;-- ------------------------------ Table structure for student_course-- ----------------------------DROP TABLE IF EXISTS `student_course`;CREATE TABLE `student_course` (  `id` int NOT NULL AUTO_INCREMENT COMMENT &#x27;关系ID&#x27;,  `student_id` int NOT NULL COMMENT &#x27;学生ID&#x27;,  `course_id` int NOT NULL COMMENT &#x27;科目ID&#x27;,  PRIMARY KEY (`id`),  KEY `student_id` (`student_id`),  KEY `course_id` (`course_id`),  CONSTRAINT `student_course_ibfk_1` FOREIGN KEY (`student_id`) REFERENCES `student` (`id`),  CONSTRAINT `student_course_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `course` (`id`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;学生选修科目表&#x27;;-- ------------------------------ Records of student_course-- ----------------------------BEGIN;INSERT INTO `student_course` VALUES (1, 1, 1);INSERT INTO `student_course` VALUES (2, 1, 2);INSERT INTO `student_course` VALUES (3, 2, 1);INSERT INTO `student_course` VALUES (4, 2, 2);COMMIT;SET FOREIGN_KEY_CHECKS = 1;</span></span><br></pre></td></tr></table></figure>
<h3 id="认识几个功能菜单"><a href="#认识几个功能菜单" class="headerlink" title="认识几个功能菜单"></a>认识几个功能菜单</h3><p>当你选择好对应的数据库表后，你会发现有这么 4 个菜单：<br><img src="https://pics2.baidu.com/feed/242dd42a2834349bc00a1ec7209276c237d3beed.jpeg@f_auto?token=69ceef76c6f5192e8917df6e2e0e011b"></p>
<p>自然语言转 SQL：简单来说就是 使用中文描述，软件自动帮我们生成 SQL；<br>SQL 解释：SQL 语句转中文解释（有的时候我们会遇到非常复杂的 SQL，有的甚至成百上千行的SQL，要读懂这段 SQL 语句可能需要几个小时甚至几天时间。 通过 Chat2DB就可以快速了解这段 SQL 的含义）<br>有的时候我们写了一段 SQL 性能不好，Chat2DB 也可以帮我们优化 SQL，提升查询性能<br>不同数据库 SQL 语法有略微的差异，也可以通过 Chat2DB 让它帮我们去转换这个 SQL 的语法（比如 MySQL 转 SQLServer 语句）<br>开始测试</p>
<h3 id="自然语言转-SQL"><a href="#自然语言转-SQL" class="headerlink" title="自然语言转 SQL"></a>自然语言转 SQL</h3><p>终端输入查询学生小明的各科目成绩，包括科目名称、教师名字段，点击自然语言转 SQL。<br>在弹出的选择表中选择本次查询所涉及到的几个表：course、score、student。<br>最终生成如下：<br><img src="https://pics2.baidu.com/feed/9e3df8dcd100baa11780ec42ae68da1ec9fc2e24.jpeg@f_auto?token=f5203d0f4b5c5c2cbce04f771973b29d"></p>
<h3 id="SQL-解释"><a href="#SQL-解释" class="headerlink" title="SQL 解释"></a>SQL 解释</h3><p>那么，我们使用这段生成的 SQL 语句反过来看看 Chat2DB 会帮我们解释成什么。选中生成的 SQL 点击 SQL 解释，输出如下：<br><img src="https://pics7.baidu.com/feed/9358d109b3de9c824ae30c5f85f9e3061bd843e5.jpeg@f_auto?token=60029aa0a171cf4cd01d12ed70ea30ee"></p>
]]></content>
      <categories>
        <category>必看精选</category>
      </categories>
      <tags>
        <tag>热门</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库代码汇总</title>
    <url>/2019/10/01/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="oracle序列设置"><a href="#oracle序列设置" class="headerlink" title="oracle序列设置"></a>oracle序列设置</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence SE_R_DOCUMENTDETAIL_1356</span><br><span class="line">  minvalue <span class="number">1</span></span><br><span class="line">    nomaxvalue <span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span></span><br><span class="line">      increment <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line">        noorder nocycle cache <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<h3 id="设置oracle外键关联"><a href="#设置oracle外键关联" class="headerlink" title="设置oracle外键关联"></a>设置oracle外键关联</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> R_RECTIFICATIONSTAGE_1151 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> SYS_C00110337 <span class="keyword">FOREIGN</span> KEY(P_RECTIFICATIONSTAGEID) <span class="keyword">REFERENCES</span> R_RECTIFICATIONSTAGE_1151(RECTIFICATIONSTAGEID);</span><br></pre></td></tr></table></figure>
<h3 id="设置新的最大连接数"><a href="#设置新的最大连接数" class="headerlink" title="设置新的最大连接数"></a>设置新的最大连接数</h3><blockquote>
<p>set GLOBAL max_connections&#x3D;200;</p>
</blockquote>
<h3 id="结束当前进程"><a href="#结束当前进程" class="headerlink" title="结束当前进程"></a>结束当前进程</h3><blockquote>
<p>kill 加进程ID</p>
</blockquote>
<h3 id="查看当前所有用户的连接"><a href="#查看当前所有用户的连接" class="headerlink" title="查看当前所有用户的连接"></a>查看当前所有用户的连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> processlist;</span><br></pre></td></tr></table></figure>
<h3 id="我们来查看mysql的最大连接数"><a href="#我们来查看mysql的最大连接数" class="headerlink" title="我们来查看mysql的最大连接数"></a>我们来查看mysql的最大连接数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%max_connections%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="查看序列下一个号码"><a href="#查看序列下一个号码" class="headerlink" title="查看序列下一个号码"></a>查看序列下一个号码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ACHILLES.SE_Q_CMN_OPPTAUDITDETAIL_558.nextval <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>
<h3 id="查询统计档案查询SQL语句"><a href="#查询统计档案查询SQL语句" class="headerlink" title="查询统计档案查询SQL语句"></a>查询统计档案查询SQL语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> opt20.operatepointid operatepointid,opt20.operatepointname operatepointname,opt20.OPERATEPOINTADDRESS OPERATEPOINTADDRESS,ind90.industrytypename industrytypename,</span><br><span class="line">      un18.LEGALPERSON LEGALPERSON,opt20.OPPTRESPONSIBLEPERSON OPPTRESPONSIBLEPERSON,cmn1123.currentsupervisedptid currentsupervisedptid,</span><br><span class="line">       opt20.opptresponsiblepersonphone opptresponsiblepersonphone,cmn1123.currentsuperviseopptid currentsuperviseopptid,</span><br><span class="line">       replace(replace(opt21.operatepointname,<span class="string">&#x27;安全生产监察队&#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="string">&#x27;浦东新区安全生产监察大队&#x27;</span>,<span class="string">&#x27;安监大队&#x27;</span>) operatepointname1,opt20.longitude,opt20.latitude,cmn431.istemparchived,opt20.businessstatusid</span><br><span class="line">       <span class="keyword">from</span> q_cmn_operatepoint_20 opt20,d_industrytype_90 ind90,q_cmn_operatepoint_20 opt21,q_cmn_pandbunitsspecial_431 cmn431,</span><br><span class="line">                       q_cmn_unit_18 un18,Q_CMN_OPTCURRENTSUPERVISE_1123 cmn1123</span><br><span class="line">        <span class="keyword">where</span> opt20.isdeleted<span class="operator">=</span><span class="number">0</span></span><br><span class="line">                      <span class="keyword">and</span> cmn431.isdeleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> cmn431.ISNEEDREPORT<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> cmn431.pandbunitsspecialid <span class="operator">=</span> cmn1123.pandbunitsspecialid</span><br><span class="line">                      <span class="keyword">and</span> cmn1123.CURRENTSUPERVISEYPE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> cmn1123.isdeleted <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> opt20.operatepointid <span class="operator">=</span> cmn431.operatepointid <span class="keyword">and</span> un18.isdeleted<span class="operator">=</span><span class="number">0</span></span><br><span class="line">                      <span class="comment">--and opt20.businessstatusid between 1 and 2</span></span><br><span class="line">                      <span class="keyword">and</span> cmn1123.currentsuperviseopptid<span class="operator">=</span>opt21.operatepointid <span class="keyword">and</span> opt20.industrytypeid<span class="operator">=</span>ind90.industrytypeid <span class="keyword">and</span> opt20.unitid<span class="operator">=</span>un18.unitid;</span><br></pre></td></tr></table></figure>

<h3 id="如果查询出来的是null则用0代替"><a href="#如果查询出来的是null则用0代替" class="headerlink" title="如果查询出来的是null则用0代替"></a>如果查询出来的是null则用0代替</h3><blockquote>
<p>NVL(A.VERIFYNODEID, 0) VERIFYNODEID</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/2020/07/22/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%85%B3%E4%BA%8E/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<p>欢迎来到<a href="https://hexo.io/">Hexo</a>!本主题是Hexo的hexo-theme-Acrylic主题生成，官方文档地址：<a href="https://next-docs.acrylic.org.cn/">Acrylic</a>。</p>
<h3 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h3><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>

<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>您可以在 Hexo 根目录使用以下命令来进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/hexo-theme-Acrylic/Hexo-Theme-Acrylic-Next.git themes/Acrylic</span><br></pre></td></tr></table></figure>
<h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>打开 Hexo 根目录下的 config.yml, 修改主题配置部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: Acrylic</span><br></pre></td></tr></table></figure>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><blockquote>
<p>复制 &#x2F;themes&#x2F;Acrylic&#x2F;_config.yml 此文件到 Hexo 根目录，并重命名为 _config.Acrylic.yml</p>
</blockquote>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><p>进入主题文件夹 themes\Acrylic 并运行</p>
<blockquote>
<p>git pull</p>
</blockquote>
<h3 id="清理项目"><a href="#清理项目" class="headerlink" title="清理项目"></a>清理项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="打包部署项目"><a href="#打包部署项目" class="headerlink" title="打包部署项目"></a>打包部署项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://next-docs.acrylic.org.cn/">Deployment</a></p>
<blockquote>
<p>本站是基于Hexo静态博客框架，基于Butterfly为基础二次创作。每一个元素都经过重新设计<br><a href="https://butterfly.zhheo.com/Introduction.html">魔改教程</a></p>
</blockquote>
<h3 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">问题：hexo配置好后，运行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d命令，出现ERROR Deployer not found: git</span><br><span class="line"></span><br><span class="line">原因：少了hexo针对git的deploy组件</span><br><span class="line"></span><br><span class="line">解决方法：npm install --save hexo-deployer-git</span><br><span class="line"></span><br><span class="line">搞定，运行成功之后提示：INFO  Deploy done: git</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>使用</tag>
      </tags>
  </entry>
  <entry>
    <title>即刻短文</title>
    <url>/2020/07/22/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%8D%B3%E5%88%BB%E7%9F%AD%E6%96%87/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>2台电脑怎么互传文件？简直不要太方便！</title>
    <url>/2023/08/18/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C/2%E5%8F%B0%E7%94%B5%E8%84%91%E6%80%8E%E4%B9%88%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="文件夹共享"><a href="#文件夹共享" class="headerlink" title="文件夹共享"></a>文件夹共享</h3><p>文件共享在工作中会比较常见，而且只要在同一个局域网下，它甚至可以在多台电脑之间实现文件共享。具体操作如下：</p>
<blockquote>
<ol>
<li>点击电脑右下角【网络和Internet设置】，选择【网络和共享中心】-【更改高级共享设置】，打开【启用网络发现】和【启用文件和打印机共享】，点击【保存更改】。</li>
<li>打开【控制面板】，点击【系统与安全】-【Windows defender防火墙】-选择【启用或关闭Windows defender防火墙】，关闭【Windows defender防火墙】，点击【确定】。</li>
<li>找到你想要共享的文件，右击选择【属性】-【共享】，点击下拉框选择【everyone】，然后【添加】。再点击【everyone】的下拉框选择【读取&#x2F;写入】，最后点击【共享】，权限设置成功后点击【完成】。</li>
</ol>
</blockquote>
<img src="https://fsvip.gitee.io/img/wz/1.png">

<blockquote>
<ol start="4">
<li>在同一个局域网内的电脑B上，按下【Win+R快捷键】打开运行对话框中，输入：\电脑A的IP地址，即可访问共享文件夹。</li>
<li>局域网内共享文件夹，支持设置只读或读取两种访问权限，并且传输速度非常快，所受到的限制也非常小！如果访问共享文件夹时，提示输入账号和密码，可以在【高级共享设置】中，勾选【关闭密码保护共享】即可解决问题。</li>
</ol>
</blockquote>
<img src="https://fsvip.gitee.io/img/wz/2.png">

<p>全部设置完成之后，在另一台电脑启用网络发现和文件共享，就可以发现共享文件了。</p>
]]></content>
      <categories>
        <category>电脑操作</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RequestBody和RequestParam区别全面详细</title>
    <url>/2023/08/18/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/@RequestBody%E5%92%8C@RequestParam%E5%8C%BA%E5%88%AB%E5%85%A8%E9%9D%A2%E8%AF%A6%E7%BB%86/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="RequestBody和-RequestParam区别全面详细"><a href="#RequestBody和-RequestParam区别全面详细" class="headerlink" title="@RequestBody和@RequestParam区别全面详细"></a>@RequestBody和@RequestParam区别全面详细</h3><p>@RequestParam</p>
<blockquote>
<ul>
<li>注解@RequestParam接收的参数是来自requestHeader中，即请求头。</li>
<li>RequestParam可以接受简单类型的属性，也可以接受对象类型。</li>
<li>@RequestParam有三个配置参数：<br>required 表示是否必须，默认为 true，必须。<br>defaultValue 可设置请求参数的默认值。<br>value 为接收url的参数名（相当于key值）。</li>
<li>@RequestParam用来处理 Content-Type 为 application&#x2F;x-www-form-urlencoded 编码的内容，Content-Type默认为该属性。@RequestParam也可用于其它类型的请求，例如：POST、DELETE等请求。<br>所以在postman中，要选择body的类型为 x-www-form-urlencoded，这样在headers中就自动变为了 Content-Type : application&#x2F;x-www-form-urlencoded 编码格式。<br>但是这样不支持批量插入数据啊，如果改用 json 字符串来传值的话，类型设置为 application&#x2F;json，点击发送的话，会报错，后台接收不到值，为 null。<br>这时候，注解@RequestBody就派上用场了。继续往下看</li>
</ul>
</blockquote>
<h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><blockquote>
<p>注解@RequestBody接收的参数是来自requestBody中，即请求体。一般用于处理非 Content-Type: application&#x2F;x-www-form-urlencoded编码格式的数据，比如：application&#x2F;json、application&#x2F;xml等类型的数据。<br>就application&#x2F;json类型的数据而言，使用注解@RequestBody可以将body里面所有的json数据传到后端，后端再进行解析。<br>GET请求中，因为没有HttpEntity，所以@RequestBody并不适用。<br>POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type，SpringMVC通过使用<br>HandlerAdapter 配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到相应的bean上。</p>
</blockquote>
<h3 id="向表中批量插入数据"><a href="#向表中批量插入数据" class="headerlink" title="向表中批量插入数据"></a>向表中批量插入数据</h3><p>举个批量插入数据的例子，Controller层的写法如下图所示：</p>
<blockquote>
<p>由于@RequestBody可用来处理 Content-Type 为 application&#x2F;json 编码的内容，所以在postman中，选择body的类型为row -&gt; JSON(application&#x2F;json)，这样在 Headers 中也会自动变为 Content-Type : application&#x2F;json 编码格式。body内的数据如下图所示：<br>批量向表中插入两条数据，这里的 saveBatchNovel()方法已经封装了 JPA的 saveAll() 方法。body 里面的 json 语句的 key 值要与后端实体类的属性一一对应。<br>注意：前端使用$.ajax的话，一定要指定 contentType: “application&#x2F;json;charset&#x3D;utf-8;”，默认为 application&#x2F;x-www-form-urlencoded。</p>
</blockquote>
<h3 id="后端解析json数据"><a href="#后端解析json数据" class="headerlink" title="后端解析json数据"></a>后端解析json数据</h3><p>上述示例是传递到实体类中的具体写法，那么如果传递到非实体类中，body里面的json数据需要怎么解析呢？我们再来看下面这个例子：<br>在body中，我们还是输入上面的json数据，根据分析，上面的json数据是一个List数组内嵌套着map对象，那么在后台的接收形式可写为 List&lt;Map&lt;String, String&gt;&gt;，具体代码如下图所示：</p>
<blockquote>
<p>得出结论，通过@RequestBody可以解析Body中json格式的数据。</p>
</blockquote>
<h3 id="POST请求时"><a href="#POST请求时" class="headerlink" title="POST请求时"></a>POST请求时</h3><blockquote>
<p>@RequestBody –&gt; JSON字符串部分<br>@RequestParam –&gt; 请求参数部分<br>application&#x2F;json格局图<br>form-data、x-www-form-urlencoded格局图</p>
</blockquote>
<p>从content-type方面总结：</p>
<blockquote>
<p>① form-data、x-www-form-urlencoded：不可以用@RequestBody；可以用@RequestParam。见postman的格局，这两种方式的时候没有json字符串部分。<br>② application&#x2F;json：json字符串部分可以用@RequestBody；url中的?后面参数可以用@RequestParam。见postman的格局</p>
</blockquote>
<p>从两种注解方式总结：<br>@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestBody</span> Map map)</span><br><span class="line">(<span class="meta">@RequestBody</span> Object object)</span><br><span class="line">application/json时候可用</span><br><span class="line">form-data、x-www-form-urlencoded时候不可用</span><br></pre></td></tr></table></figure>
<p>@RequestParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestParam</span> Map map)</span><br><span class="line">application/json时候，json字符串部分不可用，url中的?后面添加参数即可用，form-data、x-www-form-urlencoded时候可用，但是要将Headers里的Content-Type删掉</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestParam</span> String waterEleId,<span class="meta">@RequestParam</span> String enterpriseName)</span><br><span class="line">application/json时候，json字符串部分不可用，url中的?后面添加参数即可用</span><br><span class="line">form-data、x-www-form-urlencoded时候可用，且参数可以没有顺序（即前端传过来的参数或者url中的参数顺序不必和后台接口中的参数顺序一致，只要字段名相同就可以），但是要将Headers里的Content-Type删掉</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestParam</span> Object object)</span><br><span class="line">不管application/json、form-data、x-www-form-urlencoded都不可用</span><br></pre></td></tr></table></figure>
<p>既不是@RequestBody也不是@RequestParam，没有指定参数哪种接收方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(Map map)</span><br><span class="line">(Object object)</span><br><span class="line">application/json时候：json字符串部分不可用，url中的?后面添加参数不可用。</span><br><span class="line">因为没有指定，它也不知道到底是用json字符串部分还是?后面添加参数部分，所以干脆都不可以用</span><br><span class="line">form-data、x-www-form-urlencoded时都不可用，见图二</span><br><span class="line"></span><br><span class="line">(HttpServletRequest request)</span><br><span class="line">application/json不可用</span><br><span class="line">form-data、x-www-form-urlencoded时可用</span><br></pre></td></tr></table></figure>
<h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestBody -- Map / Object</span><br><span class="line">GET请求中不可以使用<span class="meta">@RequestBody</span></span><br></pre></td></tr></table></figure>
<p>@RequestParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestParam</span> Map map)</span><br><span class="line">在url中的?后面添加参数即可使用</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestParam</span> String waterEleId,<span class="meta">@RequestParam</span> String enterpriseName)</span><br><span class="line">在url中的?后面添加参数即可使用</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="meta">@RequestParam</span> Object object)</span><br><span class="line">GET请求中不可以使用</span><br></pre></td></tr></table></figure>
<p>当使用GET请求时，通过postman添加?后面的参数，不用在url中自己一个一个拼，点击Params，在下面key-value中输入就自动拼接到url中<br>举列子<br>上传文件，包含了图中圈出来的两部分<br>如果这样，没有@RequestParam，那么url?后的参数就拿不到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/leadingIn&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseObj&lt;Boolean&gt; <span class="title function_">leadingIn</span><span class="params">(Map formData,</span></span><br><span class="line"><span class="params">                                          HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                          Map&lt;String, InputStream&gt; files)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果control中这样接收，本来想formData只接收url?后的参数，结果将{ “retCode”: null, “data”: true }这部分内容也拿到了，真实意外之喜。字符串这部分内容还可以从request中取到，见下面完整方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/leadingIn&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseObj&lt;Boolean&gt; <span class="title function_">leadingIn</span><span class="params">(<span class="meta">@RequestParam</span> Map formData,</span></span><br><span class="line"><span class="params">                                          HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                          Map&lt;String, InputStream&gt; files)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/leadingIn&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseObj&lt;Boolean&gt; <span class="title function_">leadingIn</span><span class="params">(<span class="meta">@RequestParam</span> Map formData,</span></span><br><span class="line"><span class="params">                                          HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                          Map&lt;String, InputStream&gt; files)</span> &#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MultipartHttpServletRequest</span> <span class="variable">mulRequest</span> <span class="operator">=</span> (MultipartHttpServletRequest) request;</span><br><span class="line">            Set&lt;Map.Entry&lt;String, MultipartFile&gt;&gt; set = mulRequest.getFileMap().entrySet();</span><br><span class="line">            Map&lt;String, InputStream&gt; listFile = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">            System.out.println(<span class="string">&quot;个数&quot;</span> + set.size());</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, MultipartFile&gt; each : set) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> each.getKey();</span><br><span class="line">                <span class="type">MultipartFile</span> <span class="variable">file</span> <span class="operator">=</span> each.getValue();</span><br><span class="line">                <span class="comment">//这里需要上传FTP</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    listFile.put(fileName, file.getInputStream());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseObj</span>&lt;&gt;(<span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">formjson</span> <span class="operator">=</span> mulRequest.getParameter(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            mapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            boolean result = iInstallWorkOrder.upLoadFile(listFile);</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseObj</span>&lt;&gt;(result, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            System.out.println(ex.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseObj</span>&lt;&gt;(<span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>按F12看一下Network里对应请求：<br>使用@RequestParam：Content-Type为application&#x2F;x-www-form-urlencoded，参数在FormData中<br>使用@RequestBody：Content-Type为application&#x2F;json，参数在Request PayLoad中</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<ol>
<li>在GET请求中，不能使用@RequestBody</li>
<li>在POST请求，可以使用@RequestBody和@RequestParam，但是如果使用@RequestBody，对于参数转化             的配置必须统一。</li>
<li>可以使用多个@RequestParam获取数据，@RequestBody不可以</li>
</ol>
</blockquote>
<p>标题举个例子</p>
<blockquote>
<p>   在SpringMVC配置了HttpMessageConverters处理栈中，指定json转化的格式，如Date转成‘yyyy-MM-dd’,则参数接收对象包含的字段如果是Date类型，就只能让客户端传递年月日的格式，不能传时分秒。因为不同的接口，它的参数可能对时间参数有不同的格式要求，所以这样做会让客户端调用同事对参数的格式有点困惑，所以说扩展性不高。 如果使用@RequestParam来接受参数，可以在接受参数的model中设置@DateFormat指定所需要接受时间参数的格式。 另外，使用@RequestBody接受的参数是不会被Servlet转化统一放在request对象的Param参数集中，@RequestParam是可以的。 另外，还有一种应用场景，接口规范为resultful风格时，举个例子：如果要获取某个id下此条问题答案的查询次数的话，则后台就需要动态获取参数，其注解为@PathVariable，并且requestMapping中的value应为value&#x3D;”&#x2F;{id}&#x2F;queryNum”，</p>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BigDecimal用法</title>
    <url>/2023/08/18/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/BigDecimal%E7%94%A8%E6%B3%95/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h3><p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.1</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;a values is:&quot;</span>+a);  </span><br><span class="line">System.out.println(<span class="string">&quot;=====================&quot;</span>);  </span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;b values is:&quot;</span>+b); </span><br></pre></td></tr></table></figure>
<p>结果示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a values is:<span class="number">0.1000000000000000055511151231257827021181583404541015625</span>  </span><br><span class="line">=====================  </span><br><span class="line">b values is:<span class="number">0.1</span>  </span><br></pre></td></tr></table></figure>
<p>原因分析：</p>
<blockquote>
<ol>
<li>参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入newBigDecimal(0.1)所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。</li>
<li>String 构造方法是完全可预知的：写入 newBigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言， 通常建议优先使用String构造方法。</li>
<li>当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法。</li>
</ol>
</blockquote>
<h3 id="BigDecimal常用方法详解"><a href="#BigDecimal常用方法详解" class="headerlink" title="BigDecimal常用方法详解"></a>BigDecimal常用方法详解</h3><p>常用方法</p>
<blockquote>
<p>add(BigDecimal)  BigDecimal对象中的值相加，返回BigDecimal对象<br>subtract(BigDecimal)  BigDecimal对象中的值相减，返回BigDecimal对象<br>multiply(BigDecimal)  BigDecimal对象中的值相乘，返回BigDecimal对象<br>divide(BigDecimal)  BigDecimal对象中的值相除，返回BigDecimal对象<br>toString()  将BigDecimal对象中的值转换成字符串<br>doubleValue()  将BigDecimal对象中的值转换成双精度数<br>floatValue() 将BigDecimal对象中的值转换成单精度数<br>longValue() 将BigDecimal对象中的值转换成长整数<br>intValue() 将BigDecimal对象中的值转换成整数</p>
</blockquote>
<h3 id="BigDecimal大小比较"><a href="#BigDecimal大小比较" class="headerlink" title="BigDecimal大小比较"></a>BigDecimal大小比较</h3><p>java中对BigDecimal比较大小一般用的是bigdemical的compareTo方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> bigdemical.compareTo(bigdemical2)  </span><br></pre></td></tr></table></figure>
<p>返回结果分析：</p>
<blockquote>
<p>a &#x3D; -1,表示bigdemical小于bigdemical2；<br>a &#x3D; 0,表示bigdemical等于bigdemical2；<br>a &#x3D; 1,表示bigdemical大于bigdemical2；  </p>
</blockquote>
<p>举例：a大于等于b</p>
<blockquote>
<p>new bigdemica(a).compareTo(new bigdemical(b)) &gt;&#x3D; 0</p>
</blockquote>
<h3 id="BigDecimal格式化"><a href="#BigDecimal格式化" class="headerlink" title="BigDecimal格式化"></a>BigDecimal格式化</h3><p>由于NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。<br>以利用BigDecimal对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用BigDecimal对象作为format()方法的参数，输出其格式化的货币值和百分比。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NumberFormat</span> <span class="variable">currency</span> <span class="operator">=</span> NumberFormat.getCurrencyInstance(); <span class="comment">//建立货币格式化引用   </span></span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">percent</span> <span class="operator">=</span> NumberFormat.getPercentInstance();  <span class="comment">//建立百分比格式化引用   </span></span><br><span class="line">percent.setMaximumFractionDigits(<span class="number">3</span>); <span class="comment">//百分比小数点最多3位   </span></span><br><span class="line">  </span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">loanAmount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;15000.48&quot;</span>); <span class="comment">//贷款金额  </span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interestRate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.008&quot;</span>); <span class="comment">//利率     </span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interest</span> <span class="operator">=</span> loanAmount.multiply(interestRate); <span class="comment">//相乘  </span></span><br><span class="line">  </span><br><span class="line">System.out.println(<span class="string">&quot;贷款金额:\t&quot;</span> + currency.format(loanAmount));   </span><br><span class="line">System.out.println(<span class="string">&quot;利率:\t&quot;</span> + percent.format(interestRate));   </span><br><span class="line">System.out.println(<span class="string">&quot;利息:\t&quot;</span> + currency.format(interest));   </span><br></pre></td></tr></table></figure>
<p>结果：</p>
<blockquote>
<p>贷款金额: ￥15,000.48 利率: 0.8% 利息: ￥120.00  </p>
</blockquote>
<p>BigDecimal格式化保留2为小数，不足则补0：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberFormat</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] s)</span>&#123;  </span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.435&quot;</span>)));  </span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>)));  </span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.00&quot;</span>)));  </span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.001&quot;</span>)));  </span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.006&quot;</span>)));  </span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.206&quot;</span>)));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。  </span></span><br><span class="line"><span class="comment">     * 2.传入的参数等于0，则直接返回字符串&quot;0.00&quot;  </span></span><br><span class="line"><span class="comment">     * 3.大于1的小数，直接格式化返回字符串  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj传入的小数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatToNumber</span><span class="params">(BigDecimal obj)</span> &#123;  </span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.00&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0.00&quot;</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class="number">0</span>&amp;&amp;obj.compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1</span>))&lt;<span class="number">0</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>+df.format(obj).toString();  </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> df.format(obj).toString();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<blockquote>
<p>3.44<br>0.00<br>0.00<br>0.00<br>0.01<br>0.21</p>
</blockquote>
<h3 id="BigDecimal常见异常"><a href="#BigDecimal常见异常" class="headerlink" title="BigDecimal常见异常"></a>BigDecimal常见异常</h3><p>除法的时候出现异常</p>
<blockquote>
<p>java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result</p>
</blockquote>
<p>原因分析：</p>
<blockquote>
<p>通过BigDecimal的divide方法进行除法时当不整除，出现无限循环小数时，就会抛异常：java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</p>
</blockquote>
<p>解决方法：</p>
<blockquote>
<p>divide方法设置精确的小数点，如：divide(xxxxx,2)</p>
</blockquote>
<h3 id="BigDecimal总结"><a href="#BigDecimal总结" class="headerlink" title="BigDecimal总结"></a>BigDecimal总结</h3><p>在需要精确的小数计算时再使用BigDecimal，BigDecimal的性能比double和float差，在处理庞大，复杂的运算时尤为明显。故一般精度的计算没必要使用BigDecimal。<br>尽量使用参数类型为String的构造函数。<br>BigDecimal都是不可变的（immutable）的， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。</p>
<blockquote>
<p>工具类推荐</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vivo.ars.util;  </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 用于高精确处理常用的数学运算  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticUtils</span> &#123;  </span><br><span class="line">    <span class="comment">//默认除法运算精度  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEF_DIV_SCALE</span> <span class="operator">=</span> <span class="number">10</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));  </span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">add</span><span class="params">(String v1, String v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被加数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    加数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">add</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(  </span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sub</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));  </span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">sub</span><span class="params">(String v1, String v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被减数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    减数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sub</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(  </span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));  </span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">mul</span><span class="params">(String v1, String v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));  </span><br><span class="line">        <span class="keyword">return</span> round(b1.multiply(b2).doubleValue(), scale);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">mul</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(  </span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到  </span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">div</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> div(v1, v2, DEF_DIV_SCALE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指  </span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">div</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));  </span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指  </span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示需要精确到小数点以后几位  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">div</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> v, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v));  </span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">round</span><span class="params">(String v, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(  </span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v);  </span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 取余数  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">remainder</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(  </span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="keyword">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 取余数  BigDecimal  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">remainder</span><span class="params">(BigDecimal v1, BigDecimal v2, <span class="type">int</span> scale)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(  </span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 比较大小  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被比较数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 比较数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果v1 大于v2 则 返回true 否则false  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(String v1, String v2)</span> &#123;  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);  </span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">bj</span> <span class="operator">=</span> b1.compareTo(b2);  </span><br><span class="line">        <span class="type">boolean</span> res;  </span><br><span class="line">        <span class="keyword">if</span> (bj &gt; <span class="number">0</span>)  </span><br><span class="line">            res = <span class="literal">true</span>;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            res = <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔试易错点记录</title>
    <url>/2023/09/16/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/Java%E7%AC%94%E8%AF%95%E6%98%93%E9%94%99%E7%82%B9%E8%AE%B0%E5%BD%95/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="子类构造方法如何调用"><a href="#子类构造方法如何调用" class="headerlink" title="子类构造方法如何调用"></a>子类构造方法如何调用</h3><p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Derived</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Derived</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">public Derived(String s)&#123;</span><br><span class="line">    System.out.println(&quot;D&quot;);</span><br><span class="line">&#125;</span><br><span class="line">上面代码编译报错</span><br></pre></td></tr></table></figure>
<p>改成如下代码即可输出BD(或者个base类加一个无参构造函数也行):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Derived</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(s);</span><br><span class="line">    System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原因分析：</p>
<blockquote>
<p>在java中规定：一个父类可以有多个子类，但是一个子类只能有一个父类。子类可以通过extends关键字来继承父类。<br>通过继承，子类可以得到父类除构造函数以外所有的成员（包括成员变量和成员函数），但是要注意得到并不等于可以随便使用。<br>在创建子类对象时，父类的构造方法会先执行，因为子类中所有构造方法的第一行有默认的隐式super();语句，它是用来访问父类中的空参数构造方法，进行父类成员的初始化操作<br>this()是调用本类的构造方法，super()是调用父类的构造方法,且两条语句不能同时存在<br>无论如何，子类的所有构造方法，直接或间接必须调用到父类构造方法;子类的构造方法什么都不写，默认的构造方法第一行super()</p>
</blockquote>
<h3 id="子父类调用"><a href="#子父类调用" class="headerlink" title="子父类调用"></a>子父类调用</h3><p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span>&#123;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Derived&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果是：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">base base</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>jsencrypt.js前端参数RSA加密和Java后端RSA解密</title>
    <url>/2023/08/22/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/jsencrypt.js%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0RSA%E5%8A%A0%E5%AF%86/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<blockquote>
<p>首先介绍一下RSA。RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。公钥私钥成对出现，用其中一个加密只能用另一个解密，常用公钥加密私钥解密。<br>RSA的安全性依赖于大数分解，但是否等同于大数分解一直未能得到理论上的证明，因为没有证明破解RSA就一定需要作大数分解。假设存在一种无须分解大数的算法，那它肯定可以修改成为大数分解算法。 RSA 的一些变种算法已被证明等价于大数分解。不管怎样，分解n是最显然的攻击方法。人们已能分解多个十进制位的大素数。因此，模数n必须选大一些，因具体适用情况而定。</p>
</blockquote>
<h3 id="引入jsencrypt-js文件"><a href="#引入jsencrypt-js文件" class="headerlink" title="引入jsencrypt.js文件"></a>引入jsencrypt.js文件</h3><p>jsencrypt.js前端参数RSA加密 引入jsencrypt.js文件，初始化对象设置key值，进行加密解密操作，具体代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://blog.yoodb.com/app/default/js/jquery-2.1.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://blog.yoodb.com/app/default/js/jsencrypt.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> encrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>();</span></span><br><span class="line"><span class="language-javascript">            encrypt.<span class="title function_">setPublicKey</span>(<span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwjDm1HXDw8QH5ZtGMQIl2h/I8E+chOQA8aQ8xCR/+aHnROaN/ZU5Vmd2Zz7g6cAacR9BSm60+iSCYtvEGJKl0WqvbPGJkc8tedjNF1QqgWqkkuE6Udgw2OkEKJCxDg6PrAniR7Cc0io9G8bW4P8JDJjSbbafvMPDDFbVVUWJxxwIDAQAB&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> data = encrypt.<span class="title function_">encrypt</span>(<span class="string">&quot;blog.yoodb.com&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#data&#x27;</span>).<span class="title function_">val</span>(data);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Java后端RSA解密"><a href="#Java后端RSA解密" class="headerlink" title="Java后端RSA解密"></a>Java后端RSA解密</h3><p>Java后端RSA解密 Java RSA加密解密算法工具，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSACode</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;RSA&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIGNATURE_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;MD5withRSA&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;RSAPublicKey&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;RSAPrivateKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decryptBASE64(String key) &#123;</span><br><span class="line">		<span class="keyword">return</span> Base64Util.decode(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptBASE64</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Base64Util.encode(bytes);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 用私钥对信息生成数字签名</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * [<span class="doctag">@param</span>](https://my.oschina.net/u/2303379) data</span></span><br><span class="line"><span class="comment">	 *            加密数据</span></span><br><span class="line"><span class="comment">	 * [<span class="doctag">@param</span>](https://my.oschina.net/u/2303379) privateKey</span></span><br><span class="line"><span class="comment">	 *            私钥</span></span><br><span class="line"><span class="comment">	 * [<span class="doctag">@return</span>](https://my.oschina.net/u/556800)</span></span><br><span class="line"><span class="comment">	 * [<span class="doctag">@throws</span>](https://my.oschina.net/throws) Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(<span class="type">byte</span>[] data, String privateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 解密由base64编码的私钥</span></span><br><span class="line">		<span class="type">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">		<span class="comment">// 构造PKCS8EncodedKeySpec对象</span></span><br><span class="line">		<span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs8KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(keyBytes);</span><br><span class="line">		<span class="comment">// KEY_ALGORITHM 指定的加密算法</span></span><br><span class="line">		<span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		<span class="comment">// 取私钥匙对象</span></span><br><span class="line">		<span class="type">PrivateKey</span> <span class="variable">priKey</span> <span class="operator">=</span> keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">		<span class="comment">// 用私钥对信息生成数字签名</span></span><br><span class="line">		<span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">		signature.initSign(priKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line">		<span class="keyword">return</span> encryptBASE64(signature.sign());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 校验数字签名</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * [<span class="doctag">@param</span>](https://my.oschina.net/u/2303379) data</span></span><br><span class="line"><span class="comment">	 *            加密数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> publicKey</span></span><br><span class="line"><span class="comment">	 *            公钥</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment">	 *            数字签名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 校验成功返回true 失败返回false</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(<span class="type">byte</span>[] data, String publicKey, String sign)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 解密由base64编码的公钥</span></span><br><span class="line">		<span class="type">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">		<span class="comment">// 构造X509EncodedKeySpec对象</span></span><br><span class="line">		<span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(keyBytes);</span><br><span class="line">		<span class="comment">// KEY_ALGORITHM 指定的加密算法</span></span><br><span class="line">		<span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		<span class="comment">// 取公钥匙对象</span></span><br><span class="line">		<span class="type">PublicKey</span> <span class="variable">pubKey</span> <span class="operator">=</span> keyFactory.generatePublic(keySpec);</span><br><span class="line">		<span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">		signature.initVerify(pubKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line">		<span class="comment">// 验证签名是否正常</span></span><br><span class="line">		<span class="keyword">return</span> signature.verify(decryptBASE64(sign));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decryptByPrivateKey(<span class="type">byte</span>[] data, String key)</span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 对密钥解密</span></span><br><span class="line">		<span class="type">byte</span>[] keyBytes = decryptBASE64(key);</span><br><span class="line">		<span class="comment">// 取得私钥</span></span><br><span class="line">		<span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs8KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(keyBytes);</span><br><span class="line">		<span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		<span class="type">Key</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">		<span class="comment">// 对数据解密</span></span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">		<span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 解密&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 用私钥解密</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decryptByPrivateKey(String data, String key)</span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">return</span> decryptByPrivateKey(decryptBASE64(data), key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 解密&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 用公钥解密</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decryptByPublicKey(<span class="type">byte</span>[] data, String key)</span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 对密钥解密</span></span><br><span class="line">		<span class="type">byte</span>[] keyBytes = decryptBASE64(key);</span><br><span class="line">		<span class="comment">// 取得公钥</span></span><br><span class="line">		<span class="type">X509EncodedKeySpec</span> <span class="variable">x509KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(keyBytes);</span><br><span class="line">		<span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		<span class="type">Key</span> <span class="variable">publicKey</span> <span class="operator">=</span> keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">		<span class="comment">// 对数据解密</span></span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">		<span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 加密&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 用公钥加密</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encryptByPublicKey(String data, String key)</span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 对公钥解密</span></span><br><span class="line">		<span class="type">byte</span>[] keyBytes = decryptBASE64(key);</span><br><span class="line">		<span class="comment">// 取得公钥</span></span><br><span class="line">		<span class="type">X509EncodedKeySpec</span> <span class="variable">x509KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(keyBytes);</span><br><span class="line">		<span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		<span class="type">Key</span> <span class="variable">publicKey</span> <span class="operator">=</span> keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">		<span class="comment">// 对数据加密</span></span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">		<span class="keyword">return</span> cipher.doFinal(data.getBytes());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 加密&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 用私钥加密</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encryptByPrivateKey(<span class="type">byte</span>[] data, String key)</span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 对密钥解密</span></span><br><span class="line">		<span class="type">byte</span>[] keyBytes = decryptBASE64(key);</span><br><span class="line">		<span class="comment">// 取得私钥</span></span><br><span class="line">		<span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs8KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(keyBytes);</span><br><span class="line">		<span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		<span class="type">Key</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">		<span class="comment">// 对数据加密</span></span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">		<span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 取得私钥</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> keyMap</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPrivateKey</span><span class="params">(Map&lt;String, Key&gt; keyMap)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line">		<span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 取得公钥</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> keyMap</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPublicKey</span><span class="params">(Map&lt;String, Key&gt; keyMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> keyMap.get(PUBLIC_KEY);</span><br><span class="line">		<span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始化密钥</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Key&gt; <span class="title function_">initKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">KeyPairGenerator</span> <span class="variable">keyPairGen</span> <span class="operator">=</span> KeyPairGenerator</span><br><span class="line">				.getInstance(KEY_ALGORITHM);</span><br><span class="line">		keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">		<span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGen.generateKeyPair();</span><br><span class="line">		Map&lt;String, Key&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">2</span>);</span><br><span class="line">		keyMap.put(PUBLIC_KEY, keyPair.getPublic());<span class="comment">// 公钥</span></span><br><span class="line">		keyMap.put(PRIVATE_KEY, keyPair.getPrivate());<span class="comment">// 私钥</span></span><br><span class="line">		<span class="keyword">return</span> keyMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">publicKey</span> <span class="operator">=</span> <span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwjDm1HXDw8QH5ZtGMQIl2h/I8E+chOQA8aQ8xCR/+aHnROaN/ZU5Vmd2Zz7g6cAacR9BSm60+iSCYtvEGJKl0WqvbPGJkc8tedjNF1QqgWqkkuE6Udgw2OkEKJCxDg6PrAniR7Cc0io9G8bW4P8JDJjSbbafvMPDDFbVVUWJxxwIDAQAB&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> <span class="string">&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALCMObUdcPDxAflm0YxAiXaH8jwT5yE5ADxpDzEJH/5oedE5o39lTlWZ3ZnPuDpwBpxH0FKbrT6JIJi28QYkqXRaq9s8YmRzy152M0XVCqBaqSS4TpR2DDY6QQokLEODo+sCeJHsJzSKj0bxtbg/wkMmNJttp+8w8MMVtVVRYnHHAgMBAAECgYAOLuW/8CKPqL0A3Uq+WrzwYdGLFApAeATV1Zbb2KDSXnBS56+D346gf+D2p2Jkh3VwfrB0wn7zhC6zNhc86BsY1K6Q7xU8b7asDBqki48H3ExuxjEosEqUdLf9p9pPBCPI3I4CN/EZPEoFjNRNi5ZX/CY4iaOgsXPHEkcxuW3GQQJBAOBo9UpXesZYCsmuuGN5SOy6tXI613NUBvXKXkxBil3ZOqozlaSjv5NSQb2zLeh2DcYfecumfgn04rNM/pLeDmECQQDJZnXWg4VrXdjc9hqu/8rkmxdhsr3ERkX1uKJrDUB+AOdFs6mS9gEHnJ70zqQ2ucbhQ4htulbLc9pBVL5gy+EnAkEArdhhfa/7SsBVyxvxeA4zMkEJ4242Df/gTHTzTDvRxxZL3iKMILlB5gzpJN40CEu8K+miXuOh7HCrVp+k733awQJBAMDkERhS/wXF7F40l3nkIz6wC8TWnEnPxFGDdItzNcF4vAhV+qN2WaYgq11sTHrdk01MkO4G+foCC5dmwq+SlSECQGm58ReqUTRDAKl32VX0vEdVvOj2getVxW6jQjJFiGj8iNDfK+DpiLfns3YjwSlWHGxHz1S6/lQ+58+M+fEyvUs=&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">inputStr</span> <span class="operator">=</span> <span class="string">&quot;sign&quot;</span>;</span><br><span class="line">		<span class="type">byte</span>[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		<span class="type">byte</span>[] encodedData = RSACode.encryptByPrivateKey(data, privateKey);</span><br><span class="line"></span><br><span class="line">		<span class="type">byte</span>[] decodedData = RSACode</span><br><span class="line">				.decryptByPrivateKey(Base64Util.decode(<span class="string">&quot;mIENuMEvbTkceKAzoqDLx8qiuZ12wZ5eRhZMKf2dfL+ZJkxJHnBXxNZiMpbIFHjIJSoP7sBxknR8PEPFAVgNoL2HqlEmOGFzpXugWK37fDpoKSOFpT0AKJyY4/j87F52YZlIjsJgk74+KDyrPKxagzEZejb8bAI4Ln/54UaVhd0=&quot;</span>),</span><br><span class="line">						privateKey);</span><br><span class="line">		<span class="type">String</span> <span class="variable">outputStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(decodedData);</span><br><span class="line">		System.err.println(<span class="string">&quot;加密前: &quot;</span> + inputStr + <span class="string">&quot;\n\r&quot;</span> + <span class="string">&quot;解密后: &quot;</span> + outputStr);</span><br><span class="line"></span><br><span class="line">		System.err.println(<span class="string">&quot;私钥签名——公钥验证签名&quot;</span>);</span><br><span class="line">		<span class="comment">// 产生签名</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> RSACode.sign(encodedData, privateKey);</span><br><span class="line">		System.err.println(<span class="string">&quot;签名:&quot;</span> + sign);</span><br><span class="line">		<span class="comment">// 验证签名</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">status</span> <span class="operator">=</span> RSACode.verify(encodedData, publicKey, sign);</span><br><span class="line">		System.err.println(<span class="string">&quot;状态:&quot;</span> + status);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>RSA加解密</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现点击不同按钮展示不同内容</title>
    <url>/2023/08/18/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/vue%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E4%B8%8D%E5%90%8C%E6%8C%89%E9%92%AE%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%90%8C%E5%86%85%E5%AE%B9/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<blockquote>
<p>效果是：在同一个页面，点击不同按钮，展示不同内容（内容也是在同一页面）<br>方法是：借助v-show渲染不同的class属性<br>步骤：</p>
</blockquote>
<h3 id="先写两个按钮"><a href="#先写两个按钮" class="headerlink" title="先写两个按钮"></a>先写两个按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn_anniu&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;change(0)&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; newStyle:0===number&#125;&quot;</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn_anniu&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;change(1)&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; newStyle:1===number&#125;&quot;</span>&gt;</span>监控<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.newStyle</span>&#123;</span><br><span class="line">   <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#f0892e</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#f0892e</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">29px</span>;</span><br><span class="line">   <span class="attribute">font-weight</span>: bold;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="切换显示的内容"><a href="#切换显示的内容" class="headerlink" title="切换显示的内容"></a>切换显示的内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right3&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;0===number&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是地图<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;1===number&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是监控<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="vue双向绑定"><a href="#vue双向绑定" class="headerlink" title="vue双向绑定"></a>vue双向绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">number</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">change</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = index; <span class="comment">//重要处</span></span><br><span class="line">      &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>精髓代码随手笔记</title>
    <url>/2023/07/16/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/%E7%B2%BE%E9%AB%93%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="利用GSON把map转换成string"><a href="#利用GSON把map转换成string" class="headerlink" title="利用GSON把map转换成string"></a>利用GSON把map转换成string</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; params;</span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(params, HashMap.class);</span><br></pre></td></tr></table></figure>
<h3 id="把String转换成Map"><a href="#把String转换成Map" class="headerlink" title="把String转换成Map"></a>把String转换成Map</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">String plainText;</span><br><span class="line">Gson gson = new Gson();</span><br><span class="line">HashMap plainTextMap = gson.fromJson(plainText, HashMap.class);</span><br></pre></td></tr></table></figure>
<h3 id="new线程休眠时间"><a href="#new线程休眠时间" class="headerlink" title="new线程休眠时间"></a>new线程休眠时间</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">//休息5秒</span><br><span class="line">TimeUnit.SECONDS.sleep(5);</span><br></pre></td></tr></table></figure>
<h3 id="可重入锁–并发锁的添加（当程序多线程执行时给当前线程加一把锁）"><a href="#可重入锁–并发锁的添加（当程序多线程执行时给当前线程加一把锁）" class="headerlink" title="可重入锁–并发锁的添加（当程序多线程执行时给当前线程加一把锁）"></a>可重入锁–并发锁的添加（当程序多线程执行时给当前线程加一把锁）</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">//new可重入锁(和synchronized同步锁区别：ReentrantLock锁可以重复进入，当已有程序进</span><br><span class="line">    //入则自动跳过synchronized锁会让程序等待当前线程执行完毕才能执行)</span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    if(lock.tryLock())&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            //业务处理</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态日期处理（几分钟之前）"><a href="#动态日期处理（几分钟之前）" class="headerlink" title="动态日期处理（几分钟之前）"></a>动态日期处理（几分钟之前）</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">//日期没有处理前</span><br><span class="line">@GetMapping(&quot;/demo&quot;)</span><br><span class="line">public R test()&#123;</span><br><span class="line">    //五分钟之前（和北京时间差8小时）</span><br><span class="line">    Instant now = Instant.now().minus(Duration.ofMinutes(5));</span><br><span class="line">    return R.ok().data(&quot;msg&quot;,&quot;测试demo&quot;).data(&quot;now&quot;,new Date()).data(&quot;date&quot;,now);</span><br><span class="line">&#125;</span><br><span class="line">//输出结果</span><br><span class="line">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;成功&quot;,&quot;data&quot;:&#123;&quot;msg&quot;:&quot;测试demo&quot;,&quot;date&quot;:&quot;2022-11-18T08:07:39.330Z&quot;,&quot;now&quot;:&quot;2022-11-18T16:07:39.330+0800&quot;&#125;&#125;</span><br><span class="line">//配置文件加入</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+8</span><br><span class="line">//输出结果</span><br><span class="line">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;成功&quot;,&quot;data&quot;:&#123;&quot;msg&quot;:&quot;测试demo&quot;,&quot;date&quot;:&quot;2022-11-18T08:16:37.075Z&quot;,&quot;now&quot;:&quot;2022-11-18 16:16:37&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;成功&quot;,&quot;data&quot;:&#123;&quot;aa&quot;:11,&quot;aa1&quot;:112&#125;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>经典代码汇总</title>
    <url>/2023/08/22/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/%E7%BB%8F%E5%85%B8%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<h3 id="弹出框强行关闭提示"><a href="#弹出框强行关闭提示" class="headerlink" title="弹出框强行关闭提示"></a>弹出框强行关闭提示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭提示</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(event.<span class="property">clientX</span>&gt;(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>-<span class="number">10</span>) &amp;&amp; event.<span class="property">clientY</span> &lt; <span class="number">0</span> || event.<span class="property">altKey</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;当前页面尚未保存，离开后可能会导致数据丢失，是否继续离开？&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="input输入框中只能输入数字"><a href="#input输入框中只能输入数字" class="headerlink" title="input输入框中只能输入数字"></a>input输入框中只能输入数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onKeyUp=<span class="string">&quot;value=value.replace(/[^\d]/g,&#x27;&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="隐藏滚动条"><a href="#隐藏滚动条" class="headerlink" title="隐藏滚动条"></a>隐藏滚动条</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;contentFrame_body&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="隐藏滚动条支持滑动"><a href="#隐藏滚动条支持滑动" class="headerlink" title="隐藏滚动条支持滑动"></a>隐藏滚动条支持滑动</h3><p>jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init();&quot;</span> <span class="attr">class</span>=<span class="string">&quot;scroll_content&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*webkit内核*/</span></span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar-button    &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar-track     &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar-track-piece &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar-thumb&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar-resizer  &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*o内核*/</span></span><br><span class="line"><span class="selector-class">.scroll_content</span> <span class="selector-class">.-o-scrollbar</span>&#123;</span><br><span class="line">    -moz-appearance: none <span class="meta">!important</span>;   </span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-o-scrollbar-button    &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-o-scrollbar-track     &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-o-scrollbar-track-piece &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-o-scrollbar-thumb&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-o-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll_content</span>::-o-scrollbar-resizer  &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*IE10,IE11,IE12*/</span></span><br><span class="line"><span class="selector-class">.scroll_content</span>&#123;</span><br><span class="line">    -ms-scroll-chaining: chained;</span><br><span class="line">    -ms-<span class="attribute">overflow</span>-style: none;</span><br><span class="line">    -ms-<span class="attribute">content</span>-zooming: zoom;</span><br><span class="line">    -ms-scroll-rails: none;</span><br><span class="line">    -ms-<span class="attribute">content</span>-zoom-limit-min: <span class="number">100%</span>;</span><br><span class="line">    -ms-<span class="attribute">content</span>-zoom-limit-max: <span class="number">500%</span>;</span><br><span class="line">    -ms-<span class="attribute">scroll-snap-type</span>: proximity;</span><br><span class="line">    -ms-scroll-snap-points-x: <span class="built_in">snapList</span>(<span class="number">100%</span>, <span class="number">200%</span>, <span class="number">300%</span>, <span class="number">400%</span>, <span class="number">500%</span>);</span><br><span class="line">    -ms-<span class="attribute">overflow</span>-style: none;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/javascript/jquery/jquery-1.7.2.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//FF下用JS实现自定义滚动条</span></span><br><span class="line">$(<span class="string">&quot;.scroll_content&quot;</span>).<span class="title function_">niceScroll</span>(&#123;<span class="attr">cursorborder</span>:<span class="string">&quot;&quot;</span>,<span class="attr">cursorcolor</span>:<span class="string">&quot;rgba(0,0,0,0)&quot;</span>,<span class="attr">boxzoom</span>:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="验证手机号码电话号码"><a href="#验证手机号码电话号码" class="headerlink" title="验证手机号码电话号码"></a>验证手机号码电话号码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(telephone!=<span class="string">&quot;&quot;</span> &amp;&amp; !<span class="title function_">checkTelephone</span>(telephone) &amp;&amp; !<span class="title function_">checkMobile</span>(telephone))&#123;</span><br><span class="line">ymPrompt.<span class="title function_">alert</span>(<span class="string">&#x27;电话格式不正确，请输入正确的电话格式！&#x27;</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">&#x27;信息提示&#x27;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//固定电话校验（TRUE=正确，FALSE=错误）</span></span><br><span class="line"><span class="comment">//函数编码：1000</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkTelephone</span>(<span class="params">check_var</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> filter_1 = <span class="regexp">/^\d&#123;3,4&#125;-[1-9]&#123;1&#125;\d&#123;6,7&#125;$/</span>;<span class="comment">//区号-电话号码</span></span><br><span class="line">       <span class="keyword">var</span> filter_2 = <span class="regexp">/^\d&#123;3,4&#125;-[1-9]&#123;1&#125;\d&#123;6,7&#125;-\d&#123;1,5&#125;$/</span>;<span class="comment">//区号-电话号码-分机号</span></span><br><span class="line"><span class="keyword">var</span> filter_3 = <span class="regexp">/^[1-9]&#123;1&#125;\d&#123;6,7&#125;$/</span>;<span class="comment">//电话号码</span></span><br><span class="line"><span class="keyword">var</span> filter_4 = <span class="regexp">/^[1-9]&#123;1&#125;\d&#123;6,7&#125;-\d&#123;1,4&#125;$/</span>;<span class="comment">//电话号码-分机号</span></span><br><span class="line">	<span class="keyword">return</span> filter_1.<span class="title function_">test</span>(check_var) || filter_2.<span class="title function_">test</span>(check_var) || filter_3.<span class="title function_">test</span>(check_var) || filter_4.<span class="title function_">test</span>(check_var);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手机（不包含小灵通）校验（TRUE=正确，FALSE=错误）</span></span><br><span class="line"><span class="comment">//函数编码：1001</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkMobile</span>(<span class="params">check_var</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> filter_1 = <span class="regexp">/^1\d&#123;10&#125;$/</span>;<span class="comment">//手机号码</span></span><br><span class="line">    	<span class="keyword">var</span> filter_2 = <span class="regexp">/^1\d&#123;10&#125;-\d&#123;1,5&#125;$/</span>;<span class="comment">//手机号码-分机号</span></span><br><span class="line">	<span class="keyword">return</span> filter_1.<span class="title function_">test</span>(check_var)||filter_2.<span class="title function_">test</span>(check_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jsp页面虚线写法"><a href="#jsp页面虚线写法" class="headerlink" title="jsp页面虚线写法"></a>jsp页面虚线写法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">&quot;line2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">&quot;14px;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">style</span>=<span class="string">&quot;height:1px;border:none;border-top:1px dashed #8E8E8E;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="兼容ie9浏览器"><a href="#兼容ie9浏览器" class="headerlink" title="兼容ie9浏览器"></a>兼容ie9浏览器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=EmulateIE9&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="循环判断页面的复选框至少有一个被选中"><a href="#循环判断页面的复选框至少有一个被选中" class="headerlink" title="循环判断页面的复选框至少有一个被选中"></a>循环判断页面的复选框至少有一个被选中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var inspectionTypenum = 0;										</span><br><span class="line">$(&quot;input[name=&#x27;pInspectionTypeId&#x27;]&quot;).each(function()&#123;										</span><br><span class="line">     	if($(this).attr(&quot;checked&quot;)==&quot;checked&quot;)&#123;							</span><br><span class="line">     		inspectionTypenum++;						</span><br><span class="line">     	&#125;							</span><br><span class="line">&#125;);								</span><br><span class="line">if(inspectionTypenum==0)&#123;										</span><br><span class="line">     	ymPrompt.alert(&#x27;请如实填写检查内容情况！&#x27;,null,null,&#x27;信息提示&#x27;,null);							</span><br><span class="line">         return false;								</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="checkbox框循环取值-checkBoxClass2"><a href="#checkbox框循环取值-checkBoxClass2" class="headerlink" title="checkbox框循环取值(checkBoxClass2)"></a>checkbox框循环取值(checkBoxClass2)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chk_value =[];<span class="comment">//定义一个数组</span></span><br><span class="line"> $(<span class="string">&quot;input[name=&#x27;certificate&#x27;]&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;										</span><br><span class="line">		     	<span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">attr</span>(<span class="string">&quot;class&quot;</span>)==<span class="string">&quot;checkBoxClass2&quot;</span>)&#123;</span><br><span class="line">		     		chk_value.<span class="title function_">push</span>($(<span class="variable language_">this</span>).<span class="title function_">val</span>());<span class="comment">//将选中的值添加到数组chk_value中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="radio-input选中值获得jQuery"><a href="#radio-input选中值获得jQuery" class="headerlink" title="radio&#x2F;input选中值获得jQuery"></a>radio&#x2F;input选中值获得jQuery</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input[name=&#x27;queryWrituse&#x27;]:checked&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">weekGroup = $(<span class="string">&#x27;#weekGroup option:selected&#x27;</span>) .<span class="title function_">val</span>();<span class="comment">//下拉框值获取</span></span><br></pre></td></tr></table></figure>
<h3 id="表格多层循环jstl嵌套"><a href="#表格多层循环jstl嵌套" class="headerlink" title="表格多层循环jstl嵌套"></a>表格多层循环jstl嵌套</h3><img src="https://fsvip.gitee.io/imgs/8.png">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;planmattertype1331&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;planmattertype1331list&#125;&quot;</span> <span class="attr">varStatus</span>=<span class="string">&quot;s&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">c:set</span> <span class="attr">value</span>=<span class="string">&quot;p$&#123;planmattertype1331.checkplanmattertypeid&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;filekey&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;type1331&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;requestScope[filekey] &#125;&quot;</span> <span class="attr">varStatus</span>=<span class="string">&quot;s1&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;s1.index==&#x27;0&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;$&#123;fn:length(requestScope[filekey]) &#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:#fff;padding:3px;text-align: center;&quot;</span>&gt;</span>$&#123;s.index+1 &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;$&#123;fn:length(requestScope[filekey]) &#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:#fff;padding:3px;text-align: left;&quot;</span>&gt;</span>$&#123;planmattertype1331.checkplanmattertypename &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background:#fff;padding:3px;text-indent: 10px;&quot;</span>&gt;</span></span><br><span class="line">				$&#123;type1331.checkplanmattertypename &#125;</span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;placcidentContent$&#123;s1.index+1 &#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type1331.checkplanmattertypename &#125;&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background:#fff;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pInspectionTypeId$&#123;s1.index+1 &#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;type1331.checkplanmattertypeid &#125;&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="js定义数组-数组添加数值-拼接字符串"><a href="#js定义数组-数组添加数值-拼接字符串" class="headerlink" title="js定义数组 数组添加数值 拼接字符串"></a>js定义数组 数组添加数值 拼接字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name_array=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">$(<span class="string">&quot;input[name=&#x27;fieldSelect&#x27;]:checked&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       name_array.<span class="title function_">push</span>($(<span class="variable language_">this</span>).<span class="title function_">val</span>());<span class="comment">//向数组中添加元素  </span></span><br><span class="line"> &#125;);</span><br><span class="line"><span class="keyword">var</span> namestr=name_array.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>);<span class="comment">//将数组元素连接起来以构建一个字符串</span></span><br></pre></td></tr></table></figure>
<h3 id="对set集合进行排序"><a href="#对set集合进行排序" class="headerlink" title="对set集合进行排序"></a>对set集合进行排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;RRectificationstage1151&gt; rectificationstage1151s = rectificationsum1154.getRRectificationofrelease1150().getRRectificationstage1151s();</span><br><span class="line"><span class="comment">//set集合转换为list集合</span></span><br><span class="line"> List&lt;RRectificationstage1151&gt; r1151List = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;RRectificationstage1151&gt;(rectificationstage1151s);</span><br><span class="line"><span class="comment">//对数据进行排序</span></span><br><span class="line">Collections.sort(r1151List, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;RRectificationstage1151&gt;()&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(RRectificationstage1151 arg0,RRectificationstage1151 arg1)</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(arg0.getSortnumber().contains(<span class="string">&quot;.&quot;</span>) &amp;&amp; arg1.getSortnumber().contains(<span class="string">&quot;.&quot;</span>) &amp;&amp; arg0.getSortnumber().split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>].equals(arg1.getSortnumber().split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>]))&#123;</span><br><span class="line">					<span class="keyword">if</span>(Long.parseLong(arg0.getSortnumber().split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">1</span>])&gt;Long.parseLong(arg1.getSortnumber().split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">1</span>]))&#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="built_in">this</span>.getRequest().setAttribute(<span class="string">&quot;s_&quot;</span>+rectificationsum1154.getRectificationsumid().toString(), r1151List);</span><br></pre></td></tr></table></figure>
<h3 id="弹出框关闭提示"><a href="#弹出框关闭提示" class="headerlink" title="弹出框关闭提示"></a>弹出框关闭提示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭提示</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;当前页面尚未保存，离开后可能会导致数据丢失，是否继续离开？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="URL中的参数进行简单加密处理逻辑"><a href="#URL中的参数进行简单加密处理逻辑" class="headerlink" title="URL中的参数进行简单加密处理逻辑"></a>URL中的参数进行简单加密处理逻辑</h3><p>引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/javascript/base64.js&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>js加密</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> base = <span class="keyword">new</span> <span class="title class_">Base64</span>();</span><br><span class="line">	<span class="keyword">var</span> flag = base.<span class="title function_">encode</span>(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">	<span class="keyword">var</span> valid=base.<span class="title function_">encode</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	<span class="keyword">var</span> inpectionDays=base.<span class="title function_">encode</span>(inpectionDays);</span><br><span class="line">	<span class="variable language_">window</span>.<span class="title function_">showModalDialog</span>(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/committeeoffice/inpectiondays!inpectionDaysStatisticsQueryForword.action?flag=&quot;</span>+flag+<span class="string">&quot;&amp;isValid=&quot;</span>+valid</span><br></pre></td></tr></table></figure>
<p>java解密：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(inpectionDays!=<span class="literal">null</span> &amp;&amp; !inpectionDays.<span class="title function_">equals</span>(<span class="string">&quot;&quot;</span>)) inpectionDays = <span class="keyword">new</span> <span class="title class_">String</span>((<span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>()).<span class="title function_">decodeBuffer</span>(inpectionDays),<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="动态显示隐藏元素"><a href="#动态显示隐藏元素" class="headerlink" title="动态显示隐藏元素"></a>动态显示隐藏元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.party1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	$(<span class="string">&quot;#party1&quot;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot调用http请求的6种方式</title>
    <url>/2023/07/19/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/SpringBoot%E8%B0%83%E7%94%A8http%E8%AF%B7%E6%B1%82%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<p>场景：基于Spring Boot使用Java调用http请求的6种方式。服务端发布一个POST请求和2个GET请求。使用6种方式实现的客户端都调用服务端发布的这3个方法。可以直观感受和比对6种http请求的客户端。<br>版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spring Boot <span class="number">2.6</span><span class="number">.3</span></span><br><span class="line">Spring Framework <span class="number">5.3</span><span class="number">.15</span></span><br><span class="line">Spring Cloud <span class="number">2021.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<h2 id="案例场景"><a href="#案例场景" class="headerlink" title="案例场景"></a>案例场景</h2><p>本例实现6种方式客户端调用同一个服务端的3种方法。</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>在服务端发布一个POST请求，2个GET请求。 </p>
<h3 id="接口信息"><a href="#接口信息" class="headerlink" title="接口信息"></a>接口信息</h3><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问URL]: http:<span class="comment">//127.0.0.1:19091/server/comm/f1</span></span><br><span class="line">[请求方式]: POST</span><br><span class="line">[请求参数]: JSON</span><br><span class="line">&#123;<span class="string">&quot;userName&quot;</span>:<span class="string">&quot;HangZhou20220719&quot;</span>,<span class="string">&quot;tradeName&quot;</span>:<span class="string">&quot;Vue进阶教程&quot;</span>&#125;</span><br><span class="line">[返回值]: JSON</span><br><span class="line">&#123;code=<span class="number">200</span>, message=成功&#125;</span><br></pre></td></tr></table></figure>
<h4 id="GET请求-一"><a href="#GET请求-一" class="headerlink" title="GET请求(一)"></a>GET请求(一)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问URL]: http:<span class="comment">//127.0.0.1:19091/server/comm/f2</span></span><br><span class="line">[请求方式]: GET</span><br><span class="line">[请求参数]: String</span><br><span class="line">obj=HangZhou20220719</span><br><span class="line">[返回值]: JSON</span><br><span class="line">&#123;code=<span class="number">200</span>, message=成功&#125;</span><br></pre></td></tr></table></figure>
<h4 id="GET请求-二"><a href="#GET请求-二" class="headerlink" title="GET请求(二)"></a>GET请求(二)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问URL]: http:<span class="comment">//127.0.0.1:19091/server/comm/f3/&#123;obj&#125;</span></span><br><span class="line">[请求方式]: GET</span><br><span class="line">[请求参数]: String</span><br><span class="line">obj=HangZhou20220719</span><br><span class="line">[返回值]: JSON</span><br><span class="line">&#123;code=<span class="number">200</span>, message=成功&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java调用http请求的6种方式"><a href="#Java调用http请求的6种方式" class="headerlink" title="Java调用http请求的6种方式"></a>Java调用http请求的6种方式</h2><h3 id="HttpURLConnection调用http请求"><a href="#HttpURLConnection调用http请求" class="headerlink" title="HttpURLConnection调用http请求"></a>HttpURLConnection调用http请求</h3><ol>
<li><p>Jar包位置<br>HttpURLConnection，全称：java.net.HttpURLConnection。<br>JDK 1.8中自带的rt.jar包中的java.net包内的类。</p>
</li>
<li><p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils01JdkClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   f1();</span><br><span class="line">   f2();</span><br><span class="line">   f3();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1.使用HttpURLConnection调用服务端的POST请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">// 1.请求URL</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">postUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f1&quot;</span>;</span><br><span class="line">   <span class="comment">// 2.请求参数JSON格式</span></span><br><span class="line">   Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;HangZhou20220718&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;tradeName&quot;</span>, <span class="string">&quot;Vue进阶教程&quot;</span>);</span><br><span class="line">   <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">   <span class="comment">// 3.创建连接与设置连接参数</span></span><br><span class="line">   <span class="type">URL</span> <span class="variable">urlObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(postUrl);</span><br><span class="line">   <span class="type">HttpURLConnection</span> <span class="variable">httpConn</span> <span class="operator">=</span> (HttpURLConnection) urlObj.openConnection();</span><br><span class="line">   httpConn.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">   httpConn.setRequestProperty(<span class="string">&quot;Charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   <span class="comment">// POST请求且JSON数据,必须设置</span></span><br><span class="line">   httpConn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">   <span class="comment">// 打开输出流,默认是false</span></span><br><span class="line">   httpConn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">// 打开输入流,默认是true,可省略</span></span><br><span class="line">   httpConn.setDoInput(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">// 4.从HttpURLConnection获取输出流和写数据</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">oStream</span> <span class="operator">=</span> httpConn.getOutputStream();</span><br><span class="line">   oStream.write(json.getBytes());</span><br><span class="line">   oStream.flush();</span><br><span class="line">   <span class="comment">// 5.发起http调用(getInputStream触发http请求)</span></span><br><span class="line">   <span class="keyword">if</span> (httpConn.getResponseCode() != <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 6.从HttpURLConnection获取输入流和读数据</span></span><br><span class="line">   <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(httpConn.getInputStream()));</span><br><span class="line">   <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">   System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">   <span class="comment">// 7.关闭HttpURLConnection连接</span></span><br><span class="line">   httpConn.disconnect();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 2.使用HttpURLConnection调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f2&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">para</span> <span class="operator">=</span> <span class="string">&quot;?obj=&quot;</span> + URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  getUrl = getUrl + para;</span><br><span class="line">  <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">URL</span> <span class="variable">urlObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(getUrl);</span><br><span class="line">  <span class="type">HttpURLConnection</span> <span class="variable">httpConn</span> <span class="operator">=</span> (HttpURLConnection) urlObj.openConnection();</span><br><span class="line">  httpConn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">  httpConn.setRequestProperty(<span class="string">&quot;Charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  <span class="comment">// 3.发起http调用(getInputStream触发http请求)</span></span><br><span class="line">  <span class="keyword">if</span> (httpConn.getResponseCode() != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.从HttpURLConnection获取输入流和读数据</span></span><br><span class="line">  <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(httpConn.getInputStream()));</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">  <span class="comment">// 5.关闭HttpURLConnection连接</span></span><br><span class="line">  httpConn.disconnect();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 3.使用HttpURLConnection调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f3/&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  obj = URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  getUrl = getUrl + obj;</span><br><span class="line">  <span class="type">URL</span> <span class="variable">urlObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(getUrl);</span><br><span class="line">  <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">HttpURLConnection</span> <span class="variable">httpConn</span> <span class="operator">=</span> (HttpURLConnection) urlObj.openConnection();</span><br><span class="line">   httpConn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">   httpConn.setRequestProperty(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   <span class="comment">// 3.发起http调用(getInputStream触发http请求)</span></span><br><span class="line">   <span class="keyword">if</span> (httpConn.getResponseCode() != <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 4.从HttpURLConnection获取输入流和读数据</span></span><br><span class="line">   <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(httpConn.getInputStream()));</span><br><span class="line">   <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">   System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">   <span class="comment">// 5.关闭HttpURLConnection连接</span></span><br><span class="line">   httpConn.disconnect();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="commons-httpclient调用http请求"><a href="#commons-httpclient调用http请求" class="headerlink" title="commons-httpclient调用http请求"></a>commons-httpclient调用http请求</h3><ol>
<li>Jar包位置<br>commons-httpclient，比较早的Jar包，在MVNRepository仓库中，查看的最新维护时间是：2007年8月。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>客户端代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils02CommonsHttpClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  f1();</span><br><span class="line">  f2();</span><br><span class="line">  f3();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1.使用commons-httpclient调用服务端的POST请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">postUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f1&quot;</span>;</span><br><span class="line">  <span class="comment">// 2.请求参数</span></span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;HangZhou20220718&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;tradeName&quot;</span>, <span class="string">&quot;Vue进阶教程&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">  <span class="comment">// 3.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">  <span class="type">PostMethod</span> <span class="variable">postMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PostMethod</span>(postUrl);</span><br><span class="line">  postMethod.addRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">  <span class="type">RequestEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRequestEntity</span>(json, <span class="string">&quot;application/json&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  postMethod.setRequestEntity(entity);</span><br><span class="line">  <span class="comment">//解决返回值中文乱码</span></span><br><span class="line">  postMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 4.发起请求</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> httpClient.executeMethod(postMethod);</span><br><span class="line">  <span class="keyword">if</span> (code != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5.接收返回值</span></span><br><span class="line">  resultData = postMethod.getResponseBodyAsString();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">  <span class="comment">// 6.关闭连接</span></span><br><span class="line">  postMethod.releaseConnection();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 2.使用commons-httpclient调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f2&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  <span class="comment">//入参有中文需要编码</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">para</span> <span class="operator">=</span> <span class="string">&quot;?obj=&quot;</span> + URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  getUrl = getUrl + para;</span><br><span class="line">  <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">  <span class="type">GetMethod</span> <span class="variable">getMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetMethod</span>(getUrl);</span><br><span class="line">  <span class="comment">//解决返回值中文乱码</span></span><br><span class="line">  getMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  <span class="comment">// 3.发起请求</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> httpClient.executeMethod(getMethod);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (code != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.接收返回值</span></span><br><span class="line">  resultData = getMethod.getResponseBodyAsString();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">  <span class="comment">// 5.关闭连接</span></span><br><span class="line">  getMethod.releaseConnection();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 3.使用commons-httpclient调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f3/&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  <span class="comment">//入参有中文需要编码</span></span><br><span class="line">  obj = URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  getUrl = getUrl + obj;</span><br><span class="line">  <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">  <span class="type">GetMethod</span> <span class="variable">getMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetMethod</span>(getUrl);</span><br><span class="line">  <span class="comment">//解决返回值中文乱码</span></span><br><span class="line">  getMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  <span class="comment">// 3.发起请求</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> httpClient.executeMethod(getMethod);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (code != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.接收返回值</span></span><br><span class="line">  resultData = getMethod.getResponseBodyAsString();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">  <span class="comment">// 5.关闭连接</span></span><br><span class="line">  getMethod.releaseConnection();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用org-apache-httpcomponents调用http请求"><a href="#使用org-apache-httpcomponents调用http请求" class="headerlink" title="使用org.apache.httpcomponents调用http请求"></a>使用org.apache.httpcomponents调用http请求</h3><ol>
<li>Jar包位置<br>httpcomponents，在MVNRepository仓库中，查看的最新维护时间是：2020年10月。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>客户端代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils03HttpComponentsClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    f1();</span><br><span class="line">    f2();</span><br><span class="line">    f3();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1.使用org.apache.httpcomponents调用服务端的POST请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">// 1.请求URL</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">postUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f1&quot;</span>;</span><br><span class="line">   <span class="comment">// 2.请求参数</span></span><br><span class="line">   Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;HangZhou20220718&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;tradeName&quot;</span>, <span class="string">&quot;Vue进阶教程&quot;</span>);</span><br><span class="line">   <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">   <span class="comment">// 3.创建连接与设置连接参数</span></span><br><span class="line">   <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">   <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(postUrl);</span><br><span class="line">   <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(json);</span><br><span class="line">   entity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">   httpPost.setEntity(entity);</span><br><span class="line">   <span class="comment">// 4.发起请求与接收返回值</span></span><br><span class="line">   <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">   <span class="keyword">if</span> (response.getStatusLine().getStatusCode() != <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">HttpEntity</span> <span class="variable">res</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">   <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> EntityUtils.toString(res);</span><br><span class="line">   System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">   <span class="comment">// 5.关闭连接</span></span><br><span class="line">   httpClient.close();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 2.使用org.apache.httpcomponents调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f2&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">para</span> <span class="operator">=</span> <span class="string">&quot;?obj=&quot;</span> + URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   getUrl = getUrl + para;</span><br><span class="line">   <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">   <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">   <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(getUrl);</span><br><span class="line">   <span class="comment">// 3.发起请求与接收返回值</span></span><br><span class="line">   <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">   <span class="keyword">if</span> (response.getStatusLine().getStatusCode() != <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">HttpEntity</span> <span class="variable">res</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">   <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> EntityUtils.toString(res);</span><br><span class="line">   System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">   <span class="comment">// 4.关闭连接</span></span><br><span class="line">   httpClient.close();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 3.使用org.apache.httpcomponents调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f3/&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">   <span class="comment">//入参有中文需要编码</span></span><br><span class="line">   obj = URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   getUrl = getUrl + obj;</span><br><span class="line">   <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">   <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">   <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(getUrl);</span><br><span class="line">   <span class="comment">// 3.发起请求与接收返回值</span></span><br><span class="line">   <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">   <span class="keyword">if</span> (response.getStatusLine().getStatusCode() != <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;调用服务端异常.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">HttpEntity</span> <span class="variable">res</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">   <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> EntityUtils.toString(res);</span><br><span class="line">   System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line">   <span class="comment">// 4.关闭连接</span></span><br><span class="line">   httpClient.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用OkHttp调用http请求"><a href="#使用OkHttp调用http请求" class="headerlink" title="使用OkHttp调用http请求"></a>使用OkHttp调用http请求</h3><ol>
<li>Jar包位置<br>com.squareup.okhttp3，本例使用版本。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.android<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>android<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>客户端代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils04OkHttpClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  f1();</span><br><span class="line">  f2();</span><br><span class="line">  f3();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  1.使用okhttp调用服务端的POST请求</span></span><br><span class="line"><span class="comment">  *    服务端入参注解: <span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">postUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f1&quot;</span>;</span><br><span class="line">  <span class="comment">// 2.请求参数</span></span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;HangZhou20220718&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;tradeName&quot;</span>, <span class="string">&quot;Vue进阶教程&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">  <span class="comment">// 3.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">MediaType</span> <span class="variable">mediaType</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;application/json; charset=UTF-8&quot;</span>);</span><br><span class="line">  <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> RequestBody.Companion.create(json, mediaType);</span><br><span class="line">  <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(postUrl).post(requestBody).build();</span><br><span class="line">  <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br><span class="line">  <span class="comment">// 4.发起请求与接收返回值</span></span><br><span class="line">  <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> okHttpClient.newCall(request).execute();</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  2.使用okhttp调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  *    服务端入参注解: <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f2&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">para</span> <span class="operator">=</span> <span class="string">&quot;?obj=&quot;</span> + URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  getUrl = getUrl + para;</span><br><span class="line">  <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(getUrl).build();</span><br><span class="line">  <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br><span class="line">  <span class="comment">// 3.发起请求与接收返回值</span></span><br><span class="line">  <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> okHttpClient.newCall(request).execute();</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  3.使用okhttp调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  *    服务端入参注解: <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f3/&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  obj = URLEncoder.encode(obj, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">  getUrl = getUrl + obj;</span><br><span class="line">  <span class="comment">// 2.创建连接与设置连接参数</span></span><br><span class="line">  <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(getUrl).build();</span><br><span class="line">  <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br><span class="line">  <span class="comment">// 3.发起请求与接收返回值</span></span><br><span class="line">  <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> okHttpClient.newCall(request).execute();</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用RestTemplate调用http请求"><a href="#使用RestTemplate调用http请求" class="headerlink" title="使用RestTemplate调用http请求"></a>使用RestTemplate调用http请求</h3><ol>
<li>Jar包位置<br>RestTemplate，全称org.springframework.web.client.RestTemplate。 本例使用版本。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>客户端代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils05RestTemplateClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  f1();</span><br><span class="line">  f2();</span><br><span class="line">  f3();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1.使用RestTemplate调用服务端的POST请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">postUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f1&quot;</span>;</span><br><span class="line">  <span class="comment">// 2.请求参数JSON格式</span></span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;HangZhou20220718&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;tradeName&quot;</span>, <span class="string">&quot;Vue进阶教程&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">  <span class="comment">// 3.创建RestTemplate</span></span><br><span class="line">  <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">  <span class="comment">// 4.设置RestTemplate参数(请求头和body)</span></span><br><span class="line">  <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">  <span class="type">MediaType</span> <span class="variable">mediaType</span> <span class="operator">=</span> MediaType.parseMediaType(<span class="string">&quot;application/json; charset=UTF-8&quot;</span>);</span><br><span class="line">  headers.setContentType(mediaType);</span><br><span class="line">  headers.add(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">  HttpEntity&lt;String&gt; entity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(json, headers);</span><br><span class="line">  <span class="comment">// 5.使用RestTemplate发起请求与接收返回值</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> restTemplate.postForObject(postUrl, entity, String.class);</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 2.使用RestTemplate调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f2&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">para</span> <span class="operator">=</span> <span class="string">&quot;?obj=&quot;</span> + obj;</span><br><span class="line">  getUrl = getUrl + para;</span><br><span class="line">  <span class="comment">// 2.创建RestTemplate</span></span><br><span class="line">  <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">  <span class="comment">// 3.使用RestTemplate发起请求与接收返回值</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> restTemplate.getForObject(getUrl, String.class);</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 3.使用RestTemplate调用服务端的GET请求</span></span><br><span class="line"><span class="comment">  * 服务端入参注解: <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1.请求URL与组装请求参数</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">getUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:19091/server/comm/f3/&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Vue进阶教程&quot;</span>;</span><br><span class="line">  getUrl = getUrl + obj;</span><br><span class="line">  <span class="comment">// 2.创建RestTemplate</span></span><br><span class="line">  <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">  <span class="comment">// 3.使用RestTemplate发起请求与接收返回值</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">resultData</span> <span class="operator">=</span> restTemplate.getForObject(getUrl, String.class);</span><br><span class="line">  System.out.println(<span class="string">&quot;从服务端返回结果: &quot;</span> + resultData);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table><tr><td bgcolor="#fafafa">背景色是：orange</td></tr></table></li>
</ol>
<h3 id="结尾。"><a href="#结尾。" class="headerlink" title="结尾。"></a>结尾。</h3>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战问题笔记</title>
    <url>/2023/07/19/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/%5Bobject%20Object%5D/</url>
    <content><![CDATA[<blockquote>
<p>场景：基于Spring Boot使用Java调用http请求的6种方式。服务端发布一个POST请求和2个GET请求。使用6种方式实现的客户端都调用服务端发布的这3个方法。可以直观感受和比对6种http请求的客户端。</p>
</blockquote>
<h3 id="项目实体类属性不存入数据库排除方式"><a href="#项目实体类属性不存入数据库排除方式" class="headerlink" title="项目实体类属性不存入数据库排除方式"></a>项目实体类属性不存入数据库排除方式</h3><ol>
<li>@Transient<br>该注解只适用于hibernate框架，在实体类（pojo）属性上使用、表示数据库表中没有这个字段就忽略；</li>
<li>@TableField<br>该注解只适用于mybatis-plus框架：<br>@TableField(exist &#x3D; false)：表示该属性不为数据库表字段，但又是必须使用的。<br>@TableField(exist &#x3D; true)：表示该属性为数据库表字段。</li>
</ol>
<h3 id="阿里EasyExcel大数据导入用法"><a href="#阿里EasyExcel大数据导入用法" class="headerlink" title="阿里EasyExcel大数据导入用法"></a>阿里EasyExcel大数据导入用法</h3><p>pom文件依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里巴巴EasyExcel依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>导入（读）数据–第一步创建一个监听器ExcelDataListener.java继承AnalysisEventListener类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.编写一个监听器 ExcelDataListener.java继承AnalysisEventListener类</span></span><br><span class="line"><span class="comment">//    重写invoke方法</span></span><br><span class="line"><span class="keyword">package</span> com.xiaogui.log.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.Cell;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.metadata.holder.ReadRowHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.xiaogui.log.mapper.LogMapper;</span><br><span class="line"><span class="keyword">import</span> com.xiaogui.log.vo.resp.RespLogInfo;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDataListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;RespLogInfo&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 每隔10条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_COUNT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">List&lt;与Excel表头对应的Entity&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。</span></span><br><span class="line"><span class="comment">* 当然如果不用存储这个对象没用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RespLogInfoService respLogInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果使用了spring,请使用这个构造方法。</span></span><br><span class="line"><span class="comment">     * 每次创建Listener的时候需要把spring管理的类传进来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataListener</span><span class="params">(RespLogInfoService respLogInfoService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.respLogInfoService = respLogInfoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(与Excel表头对应的Entity data, AnalysisContext context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            respLogInfoService.saveOrUpdateBatch(list);</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        respLogInfoService.saveOrUpdateBatch(list);</span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespLogInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(index = 0)</span><span class="comment">//对应excel第几列</span></span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//开支类型 信用卡等</span></span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> easyExcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.easyexcel.listener.EasyExcelOrderListener;</span><br><span class="line"><span class="keyword">import</span> com.easyexcel.pojo.ExcelOrder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">* easyExcel测试类</span></span><br><span class="line"><span class="comment">  ***/</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelReadTest</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">excelRead</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">//String fileName = &quot;文件路径/订单表.xlsx&quot;;//文件路径</span></span><br><span class="line">  <span class="comment">//默认读取第一个sheet</span></span><br><span class="line">  <span class="comment">//EasyExcel.read(fileName, ExcelOrder.class,new EasyExcelOrderListener()).sheet().doRead();</span></span><br><span class="line">  <span class="comment">//或者如下方法</span></span><br><span class="line">  EasyExcel.read(file.getInputStream, RespLogInfo.class,<span class="keyword">new</span> <span class="title class_">FileListener</span>(<span class="built_in">this</span>)).sheet().doRead();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="两个实体类互相copy"><a href="#两个实体类互相copy" class="headerlink" title="两个实体类互相copy"></a>两个实体类互相copy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanUtils.copyProperties(被copyEntity,targetEntity);</span><br></pre></td></tr></table></figure>

<h3 id="实体Entity转Map"><a href="#实体Entity转Map" class="headerlink" title="实体Entity转Map"></a>实体Entity转Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; oMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().convertValue(clerk, HashMap.class);</span><br></pre></td></tr></table></figure>
<h3 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MONDAY</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">  map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//或者</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() &#123;</span><br><span class="line">  &#123;</span><br><span class="line">  put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">  put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//List常量定义方式</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;88&quot;</span>,<span class="string">&quot;99&quot;</span>,<span class="string">&quot;100&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot使用RequestBodyAdvice进行统一参数处理"><a href="#SpringBoot使用RequestBodyAdvice进行统一参数处理" class="headerlink" title="SpringBoot使用RequestBodyAdvice进行统一参数处理"></a>SpringBoot使用RequestBodyAdvice进行统一参数处理</h3><p>  请求处理&#x3D;&#x3D;&#x3D;&#x3D;在实际项目中 , 往往需要对请求参数做一些统一的操作 , 例如参数的过滤 , 字符的编码 , 第三方的解密等等 , Spring提供了RequestBodyAdvice一个全局的解决方案 , 免去了我们在Controller处理的繁琐 .RequestBodyAdvice仅对使用了@RqestBody注解的生效 , 因为它原理上还是AOP , 所以GET方法是不会操作的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xbz.common.web;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice;</span><br><span class="line">  <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  <span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">  <span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@title</span> 全局请求参数处理类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Xingbz</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2019-8-2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line">  <span class="comment">//@ControllerAdvice(basePackages = &quot;com.xbz.controller&quot;)//此处设置需要当前Advice执行的域 , 省略默认全局生效</span></span><br><span class="line">  <span class="meta">@ControllerAdvice(assignableTypes = &#123;TestController.class&#125;)</span><span class="comment">//也可以用这种方式 让单个controller生效</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalRequestBodyAdvice</span> <span class="keyword">implements</span> <span class="title class_">RequestBodyAdvice</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 此处如果返回false , 则不执行当前Advice的业务 */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">  <span class="comment">//        return methodParameter.getMethod().isAnnotationPresent(XXApiReq.class);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@title</span> 读取参数前执行</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 在此做些编码 / 解密 / 封装参数为对象的操作</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> HttpInputMessage <span class="title function_">beforeBodyRead</span><span class="params">(HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//return new XHttpInputMessage(inputMessage, &quot;UTF-8&quot;);</span></span><br><span class="line">       <span class="keyword">return</span> inputMessage;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@title</span> 读取参数后执行  解密等的操作区域</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> Xingbz</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">afterBodyRead</span><span class="params">(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">      log.info(<span class="string">&quot;第三方请求加密数据：&quot;</span>+body)</span><br><span class="line">      <span class="comment">//解密 todo</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">aaa</span> <span class="operator">=</span> body;</span><br><span class="line">      <span class="keyword">return</span> aaa;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@title</span> 无请求时的处理</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">handleEmptyBody</span><span class="params">(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> body;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>响应处理&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;实现ResponseBodyAdvice接口，其实是对加了@RestController(也就是@Controller+@ResponseBody)注解的处理器将要返回的值进行增强处理。<br>其实也就是采用了AOP的思想，对返回值进行一次修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此接口说明对添加了@Controller的类织入一个通知(增强功能)</span></span><br><span class="line">     <span class="meta">@ControllerAdvice(assignableTypes = &#123;TestController.class&#125;)</span></span><br><span class="line">     <span class="meta">@Component</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyResponseBodyAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class converterType)</span> &#123;</span><br><span class="line"> <span class="comment">// 开关处于开启状态  是get请求  </span></span><br><span class="line"> <span class="comment">//使用MethodParameter参数判断注解信息</span></span><br><span class="line"> <span class="comment">//符合此Get请求才进行织入通知</span></span><br><span class="line"> <span class="comment">//return enable &amp;&amp; returnType.hasMethodAnnotation(GetMapping.class)</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> body：原controller要返回的内容</span></span><br><span class="line"><span class="comment"> 加密操作等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line"> log.info(<span class="string">&quot;响应第三方数据加密处理开始：&quot;</span>+body)</span><br><span class="line"> <span class="comment">//加密处理 todo</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">sendXml</span> <span class="operator">=</span> body;</span><br><span class="line"> <span class="keyword">return</span> sendXml;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="vue中将后台返回的数字转换成对应的文字"><a href="#vue中将后台返回的数字转换成对应的文字" class="headerlink" title="vue中将后台返回的数字转换成对应的文字"></a>vue中将后台返回的数字转换成对应的文字</h3><p>  7.1、对于列表循环el-table-column采用如下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  第一种方案</span><br><span class="line">&lt;el-table-column prop=<span class="string">&quot;status&quot;</span> :show-overflow-tooltip=<span class="string">&quot;true&quot;</span> label=<span class="string">&quot;状态&quot;</span> width=<span class="string">&quot;60&quot;</span> :formatter=<span class="string">&quot;statusFormatter&quot;</span>&gt;</span><br><span class="line">&lt;/el-table-column&gt;ji</span><br><span class="line"></span><br><span class="line">        methods:&#123;</span><br><span class="line">        statusFormatter(row, column)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        第二种方案</span><br><span class="line">&lt;el-table-column prop=<span class="string">&quot;type&quot;</span> label=<span class="string">&quot;类型&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;template v-slot=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span><br><span class="line">&lt;span v-show=<span class="string">&quot;row.type == 1&quot;</span>&gt;普通用户&lt;/span&gt;</span><br><span class="line">&lt;span v-show=<span class="string">&quot;row.type == 2&quot;</span>&gt;管理员&lt;/span&gt;</span><br><span class="line">&lt;span v-show=<span class="string">&quot;row.type == 3&quot;</span>&gt;项目经理&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>
<p>7.2、对于详情或者修改页面采用如下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在Vue中，created和mounted的区别是created用来初始化属性值，mounted用来操作属性值。下面小编举例讲解Vue中created和mounted的区别是什么。</span><br><span class="line">created是用来初始化页面的值的</span><br><span class="line">mounted是修改页面的值的</span><br><span class="line">created() &#123;</span><br><span class="line">console.log(<span class="built_in">this</span>.dataMsg);</span><br><span class="line">console.log(<span class="built_in">this</span>.propMsg);</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(<span class="built_in">this</span>.dataMsg);</span><br><span class="line"><span class="built_in">this</span>.submit()</span><br><span class="line">console.log(<span class="built_in">this</span>.propMsg);</span><br><span class="line">&#125;</span><br><span class="line">上面方法mounted有可能只触发一次，就是说详情页面关闭后再打开mounted中的方法不会再次执行。</span><br><span class="line">完美方案v-model绑定计算属性：</span><br><span class="line">&lt;el-form-item&gt;</span><br><span class="line">&lt;span slot=<span class="string">&quot;label&quot;</span>&gt;</span><br><span class="line">&lt;i class=<span class="string">&quot;el-icon-edit&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">活动名称</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;el-input v-model=<span class="string">&quot;formatValue&quot;</span>&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">计算属性定义</span><br><span class="line">computed: &#123;</span><br><span class="line">formatValue() &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.inputvalue === <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;，</span><br></pre></td></tr></table></figure>
<h3 id="实体类属性copy"><a href="#实体类属性copy" class="headerlink" title="实体类属性copy"></a>实体类属性copy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanUtils.copyProperties(source,target);</span><br></pre></td></tr></table></figure>
<h3 id="el-table-column宽度自适应"><a href="#el-table-column宽度自适应" class="headerlink" title="el-table-column宽度自适应"></a>el-table-column宽度自适应</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">如下这种方式会把每列宽度设置为10px</span><br><span class="line">&lt;el-table-column</span><br><span class="line">prop=<span class="string">&quot;sort&quot;</span></span><br><span class="line">label=<span class="string">&quot;Sort&quot;</span></span><br><span class="line">width=<span class="string">&quot;10%&quot;</span>&gt;</span><br><span class="line">如下是百分比的写法</span><br><span class="line">&lt;el-table-column prop=<span class="string">&quot;sort&quot;</span> label=<span class="string">&quot;Sort&quot;</span> min-width=<span class="string">&quot;50%&quot;</span>&gt;</span><br><span class="line">&lt;el-table-column prop=<span class="string">&quot;sort&quot;</span> label=<span class="string">&quot;Sort&quot;</span> min-width=<span class="string">&quot;50%&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="el-table表格中单元格内容过多显示省略号"><a href="#el-table表格中单元格内容过多显示省略号" class="headerlink" title="el-table表格中单元格内容过多显示省略号"></a>el-table表格中单元格内容过多显示省略号</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">el-table表格中内容超出单元格的宽度会自动换行，会使整个表格看起来显得不太美观，</span><br><span class="line">此时可以使用el-table-column 自带的 show-overflow-tooltip=<span class="string">&quot;true&quot;</span>  属性来设置，可以使超出单元格宽度的内容变成省略号，</span><br><span class="line">而且鼠标放上去会提示单元格中原本有的全部的内容</span><br><span class="line">&lt;el-table-column</span><br><span class="line">prop=<span class="string">&quot;address&quot;</span></span><br><span class="line">label=<span class="string">&quot;地址&quot;</span></span><br><span class="line">show-overflow-tooltip=<span class="string">&quot;true&quot;</span></span><br><span class="line">min-width=<span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>
<h3 id="mybatis-plus的LambdaQueryWrapper自定义sql用法"><a href="#mybatis-plus的LambdaQueryWrapper自定义sql用法" class="headerlink" title="mybatis-plus的LambdaQueryWrapper自定义sql用法"></a>mybatis-plus的LambdaQueryWrapper自定义sql用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 如果排序的字段需要先转换类型呢</span><br><span class="line"># 那么就需要 sql自由拼接方法 （wrapper.apply）</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysRoleEntity&gt; <span class="title function_">selectListByTypeCode</span><span class="params">(String typeCode)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;SysRoleEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;SysRoleEntity&gt;()</span><br><span class="line">                .eq(SysRoleEntity::getTypeCode,typeCode)</span><br><span class="line"></span><br><span class="line">                .apply(<span class="string">&quot;ORDER BY TO_NUMBER(SEQUENCEVALUE) ASC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">或者</span><br><span class="line">apply(<span class="string">&quot;date_format(dateColumn,&#x27;%Y-%m-%d&#x27;) = &#123;0&#125;&quot;</span>, <span class="string">&quot;2020-10-08&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="mybatis-plus的-Select注解用法"><a href="#mybatis-plus的-Select注解用法" class="headerlink" title="mybatis-plus的@Select注解用法"></a>mybatis-plus的@Select注解用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有查询条件</span></span><br><span class="line"><span class="meta">@Select(&quot;select BLOCK_ID,BLOCK_NAME,PARENT_BLOCK_ID,BLOCK_LEVEL,ORDER_NUM from XY_DIC_BLOCK_T where block_level=1 &quot; )</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Block&gt; <span class="title function_">sqlMany</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//有查询条件</span></span><br><span class="line"><span class="meta">@Select(&quot;select BLOCK_ID,BLOCK_NAME,PARENT_BLOCK_ID,BLOCK_LEVEL,ORDER_NUM from XY_DIC_BLOCK_T where block_level=#&#123;level&#125;&quot;    )</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Block&gt; <span class="title function_">sqlManyParm</span><span class="params">(String level)</span>;</span><br><span class="line"><span class="comment">//sql中有条件判断</span></span><br><span class="line"><span class="meta">@Select(&quot;&lt;script&gt; select BLOCK_ID,BLOCK_NAME,PARENT_BLOCK_ID,BLOCK_LEVEL,ORDER_NUM from XY_DIC_BLOCK_T where 1=1 &quot; +</span></span><br><span class="line"><span class="meta">&quot;&lt;if test=&#x27;level != null&#x27;&gt;&quot; + &quot; and block_level=#&#123;level&#125; &quot; + &quot;&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">&quot;&lt;/script&gt;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Block&gt; <span class="title function_">sqlManyParmNull</span><span class="params">(String level)</span>;</span><br><span class="line"><span class="comment">//sql中有条件判断并且传递参数时个对象的情况</span></span><br><span class="line"><span class="meta">@Select(&quot;&lt;script&gt; select BLOCK_ID,BLOCK_NAME,PARENT_BLOCK_ID,BLOCK_LEVEL,ORDER_NUM from XY_DIC_BLOCK_T where 1=1 &quot; +</span></span><br><span class="line"><span class="meta">&quot;&lt;if test=&#x27;item.blockLevel != null&#x27;&gt;&quot; + &quot; and block_level=#&#123;item.blockLevel&#125; &quot; + &quot;&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">&quot;&lt;/script&gt;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Block&gt; <span class="title function_">sqlManyObject</span><span class="params">(<span class="meta">@Param(&quot;item&quot;)</span> Block block)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="vue调用子组件作为弹窗时只执行一次created问题"><a href="#vue调用子组件作为弹窗时只执行一次created问题" class="headerlink" title="vue调用子组件作为弹窗时只执行一次created问题"></a>vue调用子组件作为弹窗时只执行一次created问题</h3><p>解决办法：用v-if将子组件包裹起来，因为v-if&#x3D;false时可以将子组件销毁掉，再次调用时重新渲染<br>补充知识：vue如何每次打开子组件弹窗都进行初始化       :visible.sync 与 v-if同时使用即可<br><img src="https://fsvip.gitee.io/img/3dd66.jpg"></p>
<h3 id="Java字符串前后补零的几种方法"><a href="#Java字符串前后补零的几种方法" class="headerlink" title="Java字符串前后补零的几种方法"></a>Java字符串前后补零的几种方法</h3><p>数字类型前补 0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.format(<span class="string">&quot;%08d&quot;</span>, <span class="number">123</span>);    <span class="comment">// 00000123</span></span><br></pre></td></tr></table></figure>
<p>字符串类型前补 0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.format(<span class="string">&quot;%8s&quot;</span>, <span class="string">&quot;abc&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="comment">// 00000abc</span></span><br></pre></td></tr></table></figure>
<p>也可以先在前面补 8 位的 0，再截取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;00000000&quot;</span> + <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">str.substring(str.length() - <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 00000abc</span></span><br></pre></td></tr></table></figure>
<p>后补 0<br>对于后补 0，都可以使用一种方式来做，就是在后面加上 00000…，之后截取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="number">123</span> + <span class="string">&quot;00000000&quot;</span>).substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 12300000</span></span><br></pre></td></tr></table></figure>
<p>这种方式通用任何类型</p>
<h3 id="springboot集成https"><a href="#springboot集成https" class="headerlink" title="springboot集成https"></a>springboot集成https</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生成证书</span><br><span class="line">keytool -genkey -alias tomcat -dname <span class="string">&quot;CN=Andy,OU=kfit,O=kfit,L=HaiDian,ST=BeiJing,C=CN&quot;</span> -storetype PKCS12 -keyalg RSA -keysize <span class="number">2048</span> -keystore keystore.p12 -validity <span class="number">365</span></span><br><span class="line">说明：<span class="string">&quot;CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码&quot;</span></span><br></pre></td></tr></table></figure>
<p>输入后会提示输入密码，这个密码在下面配置文件有用到。<br>生成后，在家目录找到证书文件，复制到SpringBoot应用的src&#x2F;main&#x2F;resources下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">application.yml配置如下信息</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">ssl:</span></span><br><span class="line"><span class="comment"># 证书路径</span></span><br><span class="line"><span class="attr">key-store:</span> <span class="string">classpath:keystore.p12</span></span><br><span class="line"><span class="comment"># 与申请时输入一致</span></span><br><span class="line"><span class="attr">key-alias:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">key-store-type:</span> <span class="string">PKCS12</span></span><br><span class="line"><span class="comment">#与申请时输入一致</span></span><br><span class="line"><span class="attr">key-store-password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 浏览器默认端口 和 80 类似，https默认的端口号为443</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">443</span></span><br><span class="line"><span class="string">说明：端口443可以改成任意值</span></span><br></pre></td></tr></table></figure>
<p>此时启动SpringBoot应用，发现可以通过https访问了&#x3D;&#x3D;&#x3D;&#x3D;快去打开浏览器访问试试😉。<br>想要http同时访问就看下面，否则跳过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在yml配置文件中，添加http端口号定义</span><br><span class="line">server</span><br><span class="line">http:</span><br><span class="line">port: <span class="number">8888</span></span><br><span class="line">创建配置类</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.http.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer httpPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletContainer</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">connector.setPort(httpPort);</span><br><span class="line"><span class="keyword">final</span> <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line"></span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(connector);</span><br><span class="line">    <span class="keyword">return</span> tomcat;</span><br><span class="line">&#125;</span><br><span class="line">启动项目时，我们会发现如下日志，Tomcat绑定了两个端口号，其中https绑定在<span class="number">8080</span>，http绑定在<span class="number">8888</span>。</span><br><span class="line">恭喜你通关</span><br></pre></td></tr></table></figure>
<h3 id="项目防刷控制-自定义注解"><a href="#项目防刷控制-自定义注解" class="headerlink" title="项目防刷控制(自定义注解)"></a>项目防刷控制(自定义注解)</h3><p>创建一个自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">seconds</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">maxCount</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.创建一个拦截器 (用于拦截请求,更新当前用户访问的次数,如果访问受限,则返回超时的状态码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.annotation.AccessLimit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FangshuaInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line"><span class="type">HandlerMethod</span> <span class="variable">handler1</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line"><span class="comment">//       3. 获取方法中的注解,看是否有该注解</span></span><br><span class="line"><span class="type">AccessLimit</span> <span class="variable">accessLimit</span> <span class="operator">=</span> handler1.getMethodAnnotation(AccessLimit.class);</span><br><span class="line"><span class="keyword">if</span> (accessLimit != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//                3.2 ： 判断请求是否受限制</span></span><br><span class="line"><span class="keyword">if</span> (isLimit(request, accessLimit)) &#123;</span><br><span class="line">render(response, <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;30001\&quot;,\&quot;message\&quot;:\&quot;请求过快\&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断请求是否受限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLimit</span><span class="params">(HttpServletRequest request, AccessLimit accessLimit)</span> &#123;</span><br><span class="line">        <span class="comment">// 受限的redis 缓存key ,因为这里用浏览器做测试，我就用sessionid 来做唯一key,如果是app ,可以使用 用户ID 之类的唯一标识。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">limitKey</span> <span class="operator">=</span> request.getServletPath() + request.getSession().getId();</span><br><span class="line">        <span class="comment">// 从缓存中获取，当前这个请求访问了几次</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">redisCount</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(limitKey);</span><br><span class="line">        <span class="keyword">if</span> (redisCount == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//初始 次数</span></span><br><span class="line">            redisTemplate.opsForValue().set(limitKey, <span class="number">1</span>, accessLimit.seconds(), TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;写入redis --&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;intValue--&gt;&quot;</span> + redisCount.intValue());</span><br><span class="line">            <span class="keyword">if</span> (redisCount.intValue() &gt;= accessLimit.maxCount()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 次数自增</span></span><br><span class="line">            redisTemplate.opsForValue().increment(limitKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(HttpServletResponse response, String cm)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        out.write(cm.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.注册拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FangshuaInterceptor interceptor;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(interceptor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果redisTemplate.opsForValue().increment(limitKey);的increment方法报错添加这个方法</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"><span class="comment">//创建 redisTemplate 模版</span></span><br><span class="line">RedisTemplate&lt;String, Serializable&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//设置 value 的转化格式和 key 的转化格式</span></span><br><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line"><span class="comment">//关联 redisConnectionFactory</span></span><br><span class="line">redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"><span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.OK , 下面我们就可以在需要进行现在访问次数的controller中的方法使用该注解了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="comment">//    指定此接口同一个用户在20秒内只能访问2次</span></span><br><span class="line"><span class="meta">@AccessLimit(seconds = 20, maxCount = 2)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;我是test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string转json"><a href="#string转json" class="headerlink" title="string转json"></a>string转json</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSONObject  json=<span class="keyword">new</span>  <span class="title class_">JSONObject</span>（“”）；</span><br><span class="line"><span class="type">String</span>  <span class="variable">key</span>  <span class="operator">=</span>  json.getString（key）；</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot项目业务操作日志记录"><a href="#SpringBoot项目业务操作日志记录" class="headerlink" title="SpringBoot项目业务操作日志记录"></a>SpringBoot项目业务操作日志记录</h3><p>1、依赖配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、表结构设计</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> bus_log(</span><br><span class="line">id <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;自增id&#x27;</span></span><br><span class="line"><span class="keyword">primary</span> key,</span><br><span class="line">bus_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">null</span> comment <span class="string">&#x27;业务名称&#x27;</span>,</span><br><span class="line">bus_descrip <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span> comment <span class="string">&#x27;业务操作描述&#x27;</span>,</span><br><span class="line">oper_person <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">null</span> comment <span class="string">&#x27;操作人&#x27;</span>,</span><br><span class="line">oper_time datetime <span class="keyword">null</span> comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">ip_from <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">null</span> comment <span class="string">&#x27;操作来源ip&#x27;</span>,</span><br><span class="line">param_file <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span> comment <span class="string">&#x27;操作参数报文文件&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;业务操作日志&#x27;</span> <span class="keyword">default</span> charset <span class="operator">=</span><span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>3、定义业务日志注解@BusLog，可以作用在控制器或其他业务类上，用于描述当前类的功能；也可以用于方法上，用于描述当前方法的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 业务日志注解 * 可以作用在控制器或其他业务类上，用于描述当前类的功能； * 也可以用于方法上，用于描述当前方法的作用； */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BusLog &#123;  </span><br><span class="line"><span class="comment">/**     * 功能名称     * <span class="doctag">@return</span>     */</span></span><br><span class="line">String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">/**     * 功能描述     * <span class="doctag">@return</span>     */</span></span><br><span class="line">String <span class="title function_">descrip</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、把业务操作日志注解BusLog标记在PersonController类和方法上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@BusLog(name = &quot;人员管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IPersonService personService;</span><br><span class="line"><span class="keyword">private</span> Integer maxCount=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@NeedEncrypt</span></span><br><span class="line">    <span class="meta">@BusLog(descrip = &quot;添加单条人员信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.personService.registe(person);</span><br><span class="line">        log.info(<span class="string">&quot;//增加person执行完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、编写切面类BusLogAop，并使用@BusLog定义切入点，在环绕通知内执行过目标方法后，获取目标类、目标方法上的业务日志注解上的功能名称和功能描述， 把方法的参数报文写入到文件中，最后保存业务操作日志信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusLogAop</span> <span class="keyword">implements</span> <span class="title class_">Ordered</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BusLogDao busLogDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**     * 定义BusLogAop的切入点为标记<span class="doctag">@BusLog</span>注解的方法     */</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;@annotation(com.fanfu.anno.BusLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**     * 业务操作环绕通知     *     * <span class="doctag">@param</span> proceedingJoinPoint     * <span class="doctag">@retur</span>     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;----BusAop 环绕通知 start&quot;</span>);</span><br><span class="line">        <span class="comment">//执行目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//目标方法执行完成后，获取目标类、目标方法上的业务日志注解上的功能名称和功能描述</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> proceedingJoinPoint.getTarget();</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        <span class="type">BusLog</span> <span class="variable">anno1</span> <span class="operator">=</span> target.getClass().getAnnotation(BusLog.class);</span><br><span class="line">        <span class="type">BusLog</span> <span class="variable">anno2</span> <span class="operator">=</span> signature.getMethod().getAnnotation(BusLog.class);</span><br><span class="line">        <span class="type">BusLogBean</span> <span class="variable">busLogBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusLogBean</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">logName</span> <span class="operator">=</span> anno1.name();</span><br><span class="line">        <span class="type">String</span> <span class="variable">logDescrip</span> <span class="operator">=</span> anno2.descrip();</span><br><span class="line">        busLogBean.setBusName(logName);</span><br><span class="line">        busLogBean.setBusDescrip(logDescrip);</span><br><span class="line">        busLogBean.setOperPerson(<span class="string">&quot;fanfu&quot;</span>);</span><br><span class="line">        busLogBean.setOperTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">JsonMapper</span> <span class="variable">jsonMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            json = jsonMapper.writeValueAsString(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把参数报文写入到文件中</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramFilePath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + DateUtil.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), DatePattern.PURE_DATETIME_MS_PATTERN) + <span class="string">&quot;.log&quot;</span>;</span><br><span class="line">            outputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(paramFilePath);</span><br><span class="line">            outputStream.write(json.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            busLogBean.setParamFile(paramFilePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.flush();</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存业务操作日志信息</span></span><br><span class="line">        <span class="built_in">this</span>.busLogDao.insert(busLogBean);</span><br><span class="line">        log.info(<span class="string">&quot;----BusAop 环绕通知 end&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jackson返回前端的字符串中引号被自动加上反斜杆"><a href="#jackson返回前端的字符串中引号被自动加上反斜杆" class="headerlink" title="jackson返回前端的字符串中引号被自动加上反斜杆"></a>jackson返回前端的字符串中引号被自动加上反斜杆</h3><ul>
<li>对象中有字符串是返回的对象中有反斜杆<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>\<span class="string">&quot;networkNumber\&quot;: 1&#125;</span></span><br></pre></td></tr></table></figure>
解决方法：<br>使用JsonNode<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DtoNew</span> &#123;</span><br><span class="line">  JsonNode data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dtoNew.data =  mapper.readTree(dto.data ));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
实际使用方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String preserveList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JsonNode preserve_list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> JsonNode <span class="title function_">getPreserve_list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().readTree(<span class="built_in">this</span> <span class="title function_">getPreserveList</span><span class="params">()</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>对象中字段转换json输出名字<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;door_no&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String doorNo;</span><br></pre></td></tr></table></figure></li>
<li>忽略字段的输出<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String doorNo;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="结尾。"><a href="#结尾。" class="headerlink" title="结尾。"></a>结尾。</h3>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>必看精选</tag>
      </tags>
  </entry>
</search>
